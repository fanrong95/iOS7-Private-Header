/*

 *     Generated by class-dump 3.4 (64 bit).

 *

 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.

 */





#import "NSManagedObjectContextFaultingDelegate.h"

#import "PFUbiquityBaselineRecoveryOperationDelegate.h"

#import "PFUbiquityBaselineRollOperationDelegate.h"

#import "PFUbiquityBaselineRollResponseOperationDelegate.h"

#import "_PFUbiquityRecordImportOperationDelegate.h"



@class NSMutableDictionary, NSObject<OS_dispatch_queue>, NSObject<OS_dispatch_source>, NSOperationQueue, NSPersistentStore, NSPersistentStoreCoordinator, NSRecursiveLock, NSSQLCore, NSString, PFUbiquityLocation, PFUbiquityRecordsImporterSchedulingContext, PFUbiquitySwitchboardCacheWrapper;



__attribute__((visibility("hidden")))

@interface _PFUbiquityRecordsImporter : NSObject <_PFUbiquityRecordImportOperationDelegate, NSManagedObjectContextFaultingDelegate, PFUbiquityBaselineRollOperationDelegate, PFUbiquityBaselineRecoveryOperationDelegate, PFUbiquityBaselineRollResponseOperationDelegate>

{

    NSOperationQueue *_importQueue;

    NSObject<OS_dispatch_queue> *_privateQueue;

    _Bool _isMonitoring;

    NSString *_localPeerID;

    PFUbiquityLocation *_ubiquityRootLocation;

    NSString *_storeName;

    NSString *_modelVersionHash;

    NSPersistentStoreCoordinator *_privatePSC;

    NSSQLCore *_privateStore;

    PFUbiquityRecordsImporterSchedulingContext *_schedulingContext;

    PFUbiquitySwitchboardCacheWrapper *_sideLoadCacheWrapper;

    NSObject<OS_dispatch_source> *_logRestartTimer;

    NSRecursiveLock *_schedulingLock;

    _Bool _importOnlyActiveStores;

    _Bool _throttleNotifications;

    unsigned long long _numPendingNotifications;

    NSMutableDictionary *_pendingNotificationUserInfo;

    _Bool _allowBaselineRoll;

    unsigned long long _pendingImportOperationsCount;

}



+ (id)addPrivateStore:(id)arg1 toCoordinator:(id)arg2 atURL:(id)arg3 error:(id *)arg4;

+ (void)afterDelay:(double)arg1 executeBlockOnRootQueue:(id)arg2;

+ (_Bool)canProcessContentsOfUbiquityRootPath:(id)arg1;

+ (id)createPrivateCoordinatorAndStoreForStore:(id)arg1 atURL:(id)arg2 error:(id *)arg3;

+ (id)createPrivateCoordinatorForStore:(id)arg1 error:(id *)arg2;

+ (void)executeBlockOnRootQueue:(id)arg1;

+ (void)initialize;

@property _Bool allowBaselineRoll; // @synthesize allowBaselineRoll=_allowBaselineRoll;

- (void)baselineRollOperationEncounteredAnInconsistentBaselineState:(id)arg1;

- (void)baselineRollOperationWasUnableToLockPersistentStore:(id)arg1;

- (_Bool)batchDownloadTransactionLogsAtLocations:(id)arg1 error:(id *)arg2;

- (_Bool)canProcessTransactionLogWithScore:(id)arg1 afterLogWithScore:(id)arg2;

- (_Bool)checkSchedulingContextForMissingLocalPeerOperations:(id)arg1 error:(id *)arg2;

- (long long)compareScoreKnowledgeVector:(id)arg1 withScoreDictionary:(id)arg2;

- (long long)context:(id)arg1 shouldHandleInaccessibleFault:(id)arg2 forObjectID:(id)arg3 andTrigger:(id)arg4;

- (id)createNewSetOfObjectIDsForCoordinator:(id)arg1 fromObjectIDs:(id)arg2;

- (id)createSortedOperationsArrayWithMetadata:(id)arg1 isFirstImport:(_Bool)arg2;

- (void)dealloc;

- (id)description;

- (_Bool)discoverAndImportAllAvailableLogs:(_Bool)arg1 error:(id *)arg2;

- (void)executeBlockOnPrivateQueue:(id)arg1;

@property _Bool importOnlyActiveStores; // @synthesize importOnlyActiveStores=_importOnlyActiveStores;

@property(readonly) NSOperationQueue *importQueue; // @synthesize importQueue=_importQueue;

- (id)init;

- (id)initWithLocalPeerID:(id)arg1 andUbiquityRootLocation:(id)arg2;

- (id)initWithLocalPeerID:(id)arg1 ubiquityRootLocation:(id)arg2 storeName:(id)arg3 andPrivateStore:(id)arg4;

@property(readonly) _Bool isMonitoring; // @synthesize isMonitoring=_isMonitoring;

@property(readonly) NSString *localPeerID; // @synthesize localPeerID=_localPeerID;

@property NSObject<OS_dispatch_source> *logRestartTimer; // @synthesize logRestartTimer=_logRestartTimer;

- (void)metadataInconsistencyDetectedForStore:(id)arg1;

- (void)operation:(id)arg1 failedWithError:(id)arg2;

- (void)operationDidFinish:(id)arg1;

- (void)operationWasInterruptedDuringImport:(id)arg1;

- (void)postImportNotificationForStoreName:(id)arg1 andLocalPeerID:(id)arg2 withUserInfo:(id)arg3;

@property(readonly, nonatomic) NSPersistentStoreCoordinator *privatePSC; // @synthesize privatePSC=_privatePSC;

@property(readonly, nonatomic) NSPersistentStore *privateStore; // @synthesize privateStore=_privateStore;

- (void)recoveryOperation:(id)arg1 didReplaceLocalStoreFileWithBaseline:(id)arg2;

- (void)recoveryOperation:(id)arg1 encounteredAnError:(id)arg2 duringRecoveryOfBaseline:(id)arg3;

- (void)requestBaselineRollForStore:(id)arg1;

- (void)rollResponseOperation:(id)arg1 encounteredAnError:(id)arg2 whileTryingToAdoptBaseline:(id)arg3;

- (void)rollResponseOperation:(id)arg1 successfullyAdoptedBaseline:(id)arg2;

- (void)scheduleBaselineRecoveryOperationWithActiveBaselineOperation:(id)arg1;

- (void)scheduleBaselineRollResponseOperationForBaselineAtLocation:(id)arg1;

- (_Bool)schedulePendingLogs:(_Bool)arg1 error:(id *)arg2;

- (void)scheduleRecoveryTimer;

- (_Bool)scheduleTransactionLogOperations:(id)arg1 synchronous:(_Bool)arg2 error:(id *)arg3;

@property(readonly, nonatomic) PFUbiquityRecordsImporterSchedulingContext *schedulingContext; // @synthesize schedulingContext=_schedulingContext;

@property(readonly, nonatomic) NSRecursiveLock *schedulingLock; // @synthesize schedulingLock=_schedulingLock;

@property(retain, nonatomic) PFUbiquitySwitchboardCacheWrapper *sideLoadCacheWrapper; // @synthesize sideLoadCacheWrapper=_sideLoadCacheWrapper;

@property _Bool throttleNotifications; // @synthesize throttleNotifications=_throttleNotifications;

@property(retain, nonatomic) PFUbiquityLocation *ubiquityRootLocation; // @synthesize ubiquityRootLocation=_ubiquityRootLocation;

- (_Bool)shouldThrottleNotificationsWithOperation:(id)arg1;

- (_Bool)startMonitor:(id *)arg1;

@property(readonly) NSString *storeName; // @synthesize storeName=_storeName;

- (void)tearDown;



@end


