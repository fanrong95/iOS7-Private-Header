/*

 *     Generated by class-dump 3.4 (64 bit).

 *

 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.

 */





#import "MSASAssetDownloaderDelegate.h"

#import "MSASAssetUploaderDelegate.h"

#import "MSBackoffManagerDelegate.h"



@class MSASAssetDownloader, MSASAssetUploader, MSASPersonModel, MSASPhoneInvitations, MSASProtocol, MSAlbumSharingDaemon, MSBackoffManager, MSImageScalingSpecification, NSArray, NSDictionary, NSMutableArray, NSObject<OS_dispatch_queue>, NSString;



@interface MSASStateMachine : NSObject <MSBackoffManagerDelegate, MSASAssetUploaderDelegate, MSASAssetDownloaderDelegate>

{

    int _commandState;

    MSASPersonModel *_model;

    NSString *_currentCommand;

    long long _currentCommandID;

    NSDictionary *_currentCommandParams;

    MSBackoffManager *_metadataBackoffManager;

    MSBackoffManager *_MMCSBackoffManager;

    MSASAssetUploader *_assetUploader;

    MSASAssetDownloader *_assetDownloader;

    _Bool _isRetryingOutstandingActivities;

    _Bool _hasShutDown;

    int _maxMetadataRetryCount;

    MSAlbumSharingDaemon *_daemon;

    NSString *_personID;

    id _delegate;

    NSDictionary *_serverSideConfiguration;

    NSString *_serverSideConfigurationVersion;

    NSString *_focusAlbumGUID;

    NSString *_focusAssetCollectionGUID;

    NSMutableArray *_assetInfoToReauthForDownload;

    id _stopHandlerBlock;

    MSASProtocol *_protocol;

    MSASPhoneInvitations *_phoneInvitations;

    MSImageScalingSpecification *_derivativeImageScalingSpecification;

    MSImageScalingSpecification *_thumbnailImageScalingSpecification;

    NSArray *_derivativeSpecifications;

    NSDictionary *_metadataBackoffManagerParameters;

    NSDictionary *_MMCSBackoffManagerParameters;

    NSObject<OS_dispatch_queue> *_workQueue;

    NSObject<OS_dispatch_queue> *_eventQueue;

    NSObject<OS_dispatch_queue> *_serverSideConfigQueue;

    NSObject<OS_dispatch_queue> *_memberQueue;

    id _postCommandCompletionBlock;

}



- (void).cxx_destruct;

@property(retain, nonatomic) NSDictionary *MMCSBackoffManagerParameters; // @synthesize MMCSBackoffManagerParameters=_MMCSBackoffManagerParameters;

- (void)MSASAssetDownloader:(id)arg1 didFinishDownloadingAsset:(id)arg2 inAlbumGUID:(id)arg3 error:(id)arg4;

- (void)MSASAssetDownloader:(id)arg1 willBeginBatchCount:(unsigned long long)arg2;

- (void)MSASAssetDownloaderDidFinishBatch:(id)arg1;

- (void)MSASAssetUploader:(id)arg1 didFinishUploadingAssetCollection:(id)arg2 intoAlbum:(id)arg3 error:(id)arg4;

- (void)MSBackoffManagerDidUpdateNextExpiryDate:(id)arg1;

- (id)_URLReauthFailureWithUnderlyingError:(id)arg1;

- (void)_addAssetCollectionsDisposition:(int)arg1 params:(id)arg2;

- (void)_addCommentDisposition:(int)arg1 params:(id)arg2;

- (void)_addSharingRelationshipsDisposition:(int)arg1 params:(id)arg2;

- (id)_assetCollectionFailedError;

- (id)_assetCollectionRejectedError;

- (id)_assetDownloader;

@property(retain, nonatomic, setter=_setAssetInfoToReauthForDownload:) NSMutableArray *_assetInfoToReauthForDownload; // @synthesize _assetInfoToReauthForDownload;

- (id)_assetUploader;

- (void)_cancelOutstandingCommandsDisposition:(int)arg1 params:(id)arg2;

- (id)_canceledError;

- (void)_checkForAlbumSyncedStateDisposition:(int)arg1 params:(id)arg2;

- (void)_checkForAssetCollectionUpdatesDisposition:(int)arg1 params:(id)arg2;

- (void)_checkForChangesDisposition:(int)arg1 params:(id)arg2;

- (void)_checkForCommentChangesDisposition:(int)arg1 params:(id)arg2;

- (void)_checkForUpdatesInAlbumDisposition:(int)arg1 params:(id)arg2;

- (void)_continueAddingAssetCollectionsDisposition:(int)arg1 params:(id)arg2;

- (void)_createAlbumDisposition:(int)arg1 params:(id)arg2;

- (id)_createHardlinkedOrCopiedAssetsInAssetCollections:(id)arg1;

- (void)_deleteAlbumDisposition:(int)arg1 params:(id)arg2;

- (void)_deleteAssetCollectionsDisposition:(int)arg1 params:(id)arg2;

- (void)_deleteAssetFilesInAssetCollection:(id)arg1;

- (void)_deleteAssetFilesInAssetCollections:(id)arg1;

- (void)_deleteCommentDisposition:(int)arg1 params:(id)arg2;

- (void)_didFinishCheckingUpdatesInAlbumsDisposition:(int)arg1 params:(id)arg2;

- (void)_getAccessControlsDisposition:(int)arg1 params:(id)arg2;

- (void)_getAlbumURLDisposition:(int)arg1 params:(id)arg2;

- (id)_metadataBackoffManager;

- (id)_model;

- (void)_removeSharingRelationshipsDisposition:(int)arg1 params:(id)arg2;

- (void)_scheduleEventDisposition:(int)arg1 params:(id)arg2;

- (void)_sendGetServerSideConfigurationDisposition:(int)arg1 params:(id)arg2;

- (void)_sendGetUploadTokensDisposition:(int)arg1 params:(id)arg2;

- (void)_sendPutAssetCollectionsDisposition:(int)arg1 params:(id)arg2;

- (void)_sendReauthorizeAssetsForDownloadDisposition:(int)arg1 params:(id)arg2;

- (void)_sendUploadCompleteDisposition:(int)arg1 params:(id)arg2;

- (id)_serverSideConfigDictionaryByApplyingDefaultsToDictionary:(id)arg1;

- (void)_setAlbumSyncedStateDisposition:(int)arg1 params:(id)arg2;

- (void)_setAssetCollectionSyncedStateDisposition:(int)arg1 params:(id)arg2;

@property(copy, nonatomic, setter=_setStopHandlerBlock:) id _stopHandlerBlock; // @synthesize _stopHandlerBlock;

- (id)_stoppedError;

- (void)_subscribeToAlbumDisposition:(int)arg1 params:(id)arg2;

- (void)_unsubscribeFromAlbumDisposition:(int)arg1 params:(id)arg2;

- (void)_updateAlbumDisposition:(int)arg1 params:(id)arg2;

- (void)_workQueueEmptyFileTransferQueuesCompletionBlock:(id)arg1;

- (void)acceptInvitationWithToken:(id)arg1 info:(id)arg2 completionBlock:(id)arg3;

- (void)addAssetCollections:(id)arg1 toAlbum:(id)arg2 info:(id)arg3;

- (void)addComments:(id)arg1 toAssetCollection:(id)arg2 inAlbum:(id)arg3 info:(id)arg4;

- (void)addSharingRelationships:(id)arg1 toOwnedAlbum:(id)arg2 info:(id)arg3;

- (int)assetsInDownloadQueueCount;

- (void)cancelCompletionBlock:(id)arg1;

- (void)cancelOutstandingCommandsForAlbumWithGUID:(id)arg1;

- (void)cancelOutstandingCommandsForAssetCollectionWithGUID:(id)arg1;

- (void)checkForAlbumSyncedStateChangesInAlbums:(id)arg1 info:(id)arg2;

- (void)checkForAssetCollectionUpdates:(id)arg1 inAlbum:(id)arg2 info:(id)arg3;

- (void)checkForChangesInfo:(id)arg1;

- (void)checkForChangesResetSync:(_Bool)arg1 info:(id)arg2;

- (void)checkForCommentChangesInAssetCollection:(id)arg1 inAlbum:(id)arg2 lastCommentID:(id)arg3 info:(id)arg4;

- (void)checkForUpdatesInAlbums:(id)arg1 resetSync:(_Bool)arg2 info:(id)arg3;

- (void)continueAddingAssetCollections:(id)arg1 skipAssetCollections:(id)arg2 toAlbum:(id)arg3 info:(id)arg4;

- (void)createAlbum:(id)arg1 info:(id)arg2;

@property(nonatomic) __weak MSAlbumSharingDaemon *daemon; // @synthesize daemon=_daemon;

- (void)dealloc;

@property(nonatomic) __weak id delegate; // @synthesize delegate=_delegate;

- (void)deleteAlbum:(id)arg1 info:(id)arg2;

- (void)deleteAssetCollections:(id)arg1 inAlbum:(id)arg2 info:(id)arg3;

- (void)deleteComments:(id)arg1 inAssetCollection:(id)arg2 inAlbum:(id)arg3 info:(id)arg4;

@property(readonly, nonatomic) MSImageScalingSpecification *derivativeImageScalingSpecification; // @synthesize derivativeImageScalingSpecification=_derivativeImageScalingSpecification;

@property(readonly, nonatomic) NSArray *derivativeSpecifications; // @synthesize derivativeSpecifications=_derivativeSpecifications;

@property(retain, nonatomic) NSObject<OS_dispatch_queue> *eventQueue; // @synthesize eventQueue=_eventQueue;

@property(retain, nonatomic) NSString *focusAlbumGUID; // @synthesize focusAlbumGUID=_focusAlbumGUID;

@property(retain, nonatomic) NSString *focusAssetCollectionGUID; // @synthesize focusAssetCollectionGUID=_focusAssetCollectionGUID;

- (void)getAccessControlsForAlbums:(id)arg1 info:(id)arg2;

- (_Bool)hasEnqueuedActivities;

@property(nonatomic) _Bool hasShutDown; // @synthesize hasShutDown=_hasShutDown;

- (id)init;

- (id)initWithPersonID:(id)arg1;

- (id)initWithPersonID:(id)arg1 eventQueue:(id)arg2;

- (_Bool)isInRetryState;

@property(nonatomic) _Bool isRetryingOutstandingActivities; // @synthesize isRetryingOutstandingActivities=_isRetryingOutstandingActivities;

- (id)latestNextActivityDate;

@property(nonatomic) int maxMetadataRetryCount; // @synthesize maxMetadataRetryCount=_maxMetadataRetryCount;

@property(retain, nonatomic) NSObject<OS_dispatch_queue> *memberQueue; // @synthesize memberQueue=_memberQueue;

- (id)memberQueueMetadataBackoffManager;

@property(retain, nonatomic) NSDictionary *metadataBackoffManagerParameters; // @synthesize metadataBackoffManagerParameters=_metadataBackoffManagerParameters;

- (id)persistentObjectForKey:(id)arg1;

@property(retain, nonatomic) NSString *personID; // @synthesize personID=_personID;

@property(retain, nonatomic) MSASPhoneInvitations *phoneInvitations; // @synthesize phoneInvitations=_phoneInvitations;

@property(copy, nonatomic) id postCommandCompletionBlock; // @synthesize postCommandCompletionBlock=_postCommandCompletionBlock;

@property(retain, nonatomic) MSASProtocol *protocol; // @synthesize protocol=_protocol;

- (void)purgeEverythingCompletionBlock:(id)arg1;

- (void)refreshServerSideConfig;

- (void)removeSharingRelationships:(id)arg1 fromOwnedAlbum:(id)arg2 info:(id)arg3;

- (void)retrieveAssets:(id)arg1 inAlbumWithGUID:(id)arg2;

- (void)retryOutstandingActivities;

- (id)rootCtagToCheckForChanges;

- (void)scheduleEvent:(id)arg1 assetCollectionGUID:(id)arg2 albumGUID:(id)arg3 info:(id)arg4;

- (id)serverCommunicationBackoffDate;

@property(retain, nonatomic) NSObject<OS_dispatch_queue> *serverSideConfigQueue; // @synthesize serverSideConfigQueue=_serverSideConfigQueue;

@property(retain, nonatomic) NSDictionary *serverSideConfiguration; // @synthesize serverSideConfiguration=_serverSideConfiguration;

@property(readonly, nonatomic) NSString *serverSideConfigurationVersion; // @synthesize serverSideConfigurationVersion=_serverSideConfigurationVersion;

- (id)serverSideQueueServerSideConfiguration;

- (void)serverSideQueueSetServerSideConfiguration:(id)arg1;

- (void)setAlbumSyncedState:(id)arg1 forAlbum:(id)arg2 info:(id)arg3;

- (void)setAssetCollectionSyncedState:(id)arg1 forAssetCollection:(id)arg2 album:(id)arg3 info:(id)arg4;

- (void)setMultipleContributorsEnabled:(_Bool)arg1 forAlbum:(id)arg2 info:(id)arg3 completionBlock:(id)arg4;

- (void)setPendingRootCtag:(id)arg1;

- (void)setPersistentObject:(id)arg1 forKey:(id)arg2;

- (void)setPublicAccessEnabled:(_Bool)arg1 forAlbum:(id)arg2 info:(id)arg3 completionBlock:(id)arg4;

- (void)setRootCtagFromPendingRootCtag;

@property(retain, nonatomic) NSObject<OS_dispatch_queue> *workQueue; // @synthesize workQueue=_workQueue;

- (void)shutDownCompletionBlock:(id)arg1;

- (void)start;

- (void)stopAssetDownloadsCompletionBlock:(id)arg1;

- (void)subscribeToAlbum:(id)arg1 info:(id)arg2;

@property(readonly, nonatomic) MSImageScalingSpecification *thumbnailImageScalingSpecification; // @synthesize thumbnailImageScalingSpecification=_thumbnailImageScalingSpecification;

- (void)unsubscribeFromAlbum:(id)arg1 info:(id)arg2;

- (void)updateAlbum:(id)arg1 updateAlbumFlags:(int)arg2 info:(id)arg3;

- (void)videoURLForAssetCollection:(id)arg1 inAlbum:(id)arg2 completionBlock:(id)arg3;

- (void)videoURLsForAssetCollection:(id)arg1 forMediaAssetType:(unsigned long long)arg2 inAlbum:(id)arg3 completionBlock:(id)arg4;

- (void)workQueueApplyServerSideConfiguration;

- (void)workQueueCancelAllCommandsFilteredByAlbumGUID:(id)arg1 assetCollectionGUID:(id)arg2;

- (void)workQueueCancelCompletionBlock:(id)arg1;

- (void)workQueueCheckForNextCommand;

- (void)workQueueDidFailToFinishCommandDueToTemporaryError:(id)arg1;

- (void)workQueueDidFinishCommand;

- (void)workQueueDidFinishCommandByLeavingCommandInQueue;

- (void)workQueueDidFinishCommandByReplacingCurrentCommandWithCommand:(id)arg1 params:(id)arg2 personID:(id)arg3 albumGUID:(id)arg4 assetCollectionGUID:(id)arg5;

- (void)workQueueDidFinishCommandDueToCancellation;

- (_Bool)workQueueEndCommandWithError:(id)arg1 command:(id)arg2 params:(id)arg3 albumGUID:(id)arg4 assetCollectionGUID:(id)arg5;

- (void)workQueuePerformNextCommand;

- (void)workQueueRefreshServerSideConfig;

- (void)workQueueRetryOutstandingActivities;

- (void)workQueueScheduleReauthForAssets:(id)arg1 inAlbum:(id)arg2;

- (void)workQueueUpdateNextActivityDate;



@end


