/*

 *     Generated by class-dump 3.4 (64 bit).

 *

 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.

 */





#import "VKLRUCacheDelegate.h"

#import "VKTileSourceClient.h"



@class GEOTileKeyList, NSArray, NSMutableSet, NSSet, VKMapRasterizer, VKStylesheet, VKTileCache, VKTileKeyList, VKTileSelection, VKTileSource, VKTimer, _VKTileProviderTimerTarget;



__attribute__((visibility("hidden")))

@interface VKTileProvider : NSObject <VKLRUCacheDelegate, VKTileSourceClient>

{

    id <VKTileProviderClient> _client;

    int _mode;

    VKTileSelection *_tileSelection;

    VKTileKeyList *_keysInView;

    VKTileKeyList *_neighborKeys;

    VKTileKeyList *_prefetchKeys;

    VKTimer *_evaluationTimer;

    VKTimer *_prefetchTimer;

    NSMutableSet *_tilesToRender;

    NSArray *_holes;

    NSMutableSet *_lostTiles;

    NSMutableSet *_neighborTiles;

    unsigned long long _neighborMode;

    _Bool _fallbackEnabled;

    _Bool _prefetchEnabled;

    VKTileCache *_tilePool;

    VKTileSource *_tilesSources[29];

    VKTileSource *_optionalTileSources[29];

    VKStylesheet *_stylesheet;

    float _loadingProgress;

    _Bool _hasFailedTile;

    _Bool _finishedLoading;

    struct VKCameraState _lastCameraState;

    struct CGSize _lastCanvasSize;

    _Bool _tilesChanged;

    VKMapRasterizer *_rasterizer;

    id <VKMapLayer> _debugLayer;

    GEOTileKeyList *_debugLayerKeys;

    int _tileReserveLimit;

    int _tileMaximumLimit;

    _Bool _useSmallTileCache;

    float _lastMidDisplayZoomLevel;

    CDStruct_34734122 _sortPoint;

    double _contentScale;

    vector_a2f7343e _exclusionAreas;

    _Bool _exclusionAreaVisible;

    _VKTileProviderTimerTarget *_evaluationTarget;

    _VKTileProviderTimerTarget *_prefetchTarget;

}



- (id).cxx_construct;

- (void).cxx_destruct;

- (void)_dirtyTile:(id)arg1 source:(id)arg2 layer:(unsigned long long)arg3;

- (void)_ensureTimers;

- (void)_fetchAvailableTiles:(_Bool)arg1;

- (void)_fillHoles:(id)arg1 context:(id)arg2;

- (void)_prefetchTiles;

- (void)_pushTimers;

- (void)_resizeCache;

- (_Bool)cache:(id)arg1 willEvictObject:(id)arg2 forKey:(const struct VKCacheKey *)arg3;

- (_Bool)canRenderTile:(id)arg1;

- (void)changeTileForKey:(const struct VKTileKey *)arg1 toState:(unsigned long long)arg2 withMetadata:(id)arg3 withTile:(id)arg4 forLayer:(unsigned long long)arg5;

- (void)clearScene;

@property(nonatomic) id <VKTileProviderClient> client; // @synthesize client=_client;

- (void)configureTileSelection;

@property(nonatomic) double contentScale; // @synthesize contentScale=_contentScale;

- (void)dealloc;

@property(retain, nonatomic) id <VKMapLayer> debugLayer; // @synthesize debugLayer=_debugLayer;

@property(readonly, nonatomic) GEOTileKeyList *debugLayerKeys; // @synthesize debugLayerKeys=_debugLayerKeys;

- (void)describeTilesFromList:(id)arg1 output:(id)arg2;

- (id)detailedDescription;

- (void)didStopLoadingTilesWithError:(id)arg1;

- (void)dirtyTilesFromTileSource:(id)arg1;

- (_Bool)evaluateNeighborTileForRendering:(id)arg1;

- (_Bool)evaluateSelectedTileForRendering:(id)arg1;

- (void)flushCaches;

- (void)foreachActiveLayer:(id)arg1;

- (void)foreachOptionalLayer:(id)arg1;

@property(readonly, nonatomic) _Bool hasFailedTile; // @synthesize hasFailedTile=_hasFailedTile;

- (_Bool)hasRequiredTileData:(id)arg1;

- (_Bool)inFailedState:(id)arg1;

- (id)initWithClient:(id)arg1;

- (void)invalidateTilesFromTileSource:(id)arg1;

@property(nonatomic, getter=isFallbackEnabled) _Bool fallbackEnabled; // @synthesize fallbackEnabled=_fallbackEnabled;

@property(readonly, nonatomic, getter=isFinishedLoading) _Bool finishedLoading; // @synthesize finishedLoading=_finishedLoading;

@property(nonatomic, getter=isPrefetchEnabled) _Bool prefetchEnabled; // @synthesize prefetchEnabled=_prefetchEnabled;

@property(readonly, nonatomic) VKTileKeyList *keysInView; // @synthesize keysInView=_keysInView;

- (unsigned long long)layerForSource:(id)arg1;

@property(readonly, nonatomic) float loadingProgress; // @synthesize loadingProgress=_loadingProgress;

@property(nonatomic) double lodBias;

@property(nonatomic) int mode; // @synthesize mode=_mode;

@property(readonly, nonatomic) VKTileKeyList *neighborKeys; // @synthesize neighborKeys=_neighborKeys;

@property(nonatomic) unsigned long long neighborMode; // @synthesize neighborMode=_neighborMode;

@property(readonly, nonatomic) NSSet *neighborTiles; // @synthesize neighborTiles=_neighborTiles;

- (void)prepareTileForRendering:(id)arg1;

- (void)quiesce;

- (void)rasterizer:(id)arg1 didMakeRasterTile:(id)arg2 forKey:(const struct VKTileKey *)arg3;

- (void)releaseChildrenFallbackTilesForTile:(id)arg1 context:(id)arg2;

- (void)releaseFallbackTileForRendering:(id)arg1;

- (void)releaseNeighborTileForRendering:(id)arg1;

- (_Bool)releaseParentFallbackTileForTile:(id)arg1;

- (void)releaseTileForRendering:(id)arg1;

- (void)removeTileSourceForMapLayer:(unsigned long long)arg1;

- (void)requireRasterization:(id)arg1;

- (void)retireNeighborTiles:(id)arg1;

- (void)retireRenderTiles:(id)arg1;

- (id)selectTiles:(int *)arg1 needRasterization:(_Bool *)arg2;

@property(retain, nonatomic) VKStylesheet *stylesheet; // @synthesize stylesheet=_stylesheet;

- (void)setTileExclusionAreas:(const vector_a2f7343e *)arg1;

- (void)setTileSource:(id)arg1 forMapLayer:(unsigned long long)arg2 optional:(_Bool)arg3;

@property(nonatomic) _Bool useSmallTileCache; // @synthesize useSmallTileCache=_useSmallTileCache;

- (id)sourceForLayer:(id)arg1;

- (_Bool)tileExclusionAreaVisible;

- (id)tileForKey:(const struct VKTileKey *)arg1;

- (_Bool)tileMatters:(id)arg1;

- (void)tileSource:(id)arg1 didFailToDecodeTileForKey:(const struct VKTileKey *)arg2;

- (void)tileSource:(id)arg1 didFailToLoadTileForKey:(const struct VKTileKey *)arg2 error:(id)arg3;

- (void)tileSource:(id)arg1 didFetchTile:(id)arg2 forKey:(const struct VKTileKey *)arg3;

- (void)tileSource:(id)arg1 dirtyTilesWithinRect:(const CDStruct_d2b197d1 *)arg2 level:(long long)arg3;

- (void)tileSource:(id)arg1 invalidateKey:(const struct VKTileKey *)arg2;

- (void)tileSource:(id)arg1 invalidateKeys:(id)arg2;

- (void)tileSource:(id)arg1 invalidateTilesWithState:(unsigned long long)arg2;

- (_Bool)tileSource:(id)arg1 keyIsNeeded:(const struct VKTileKey *)arg2;

- (_Bool)tileSourceMayUseNetwork:(id)arg1;

- (void)tileSourcesDidChange;

@property(readonly, nonatomic) NSSet *tilesToRender; // @synthesize tilesToRender=_tilesToRender;

- (void)timerFired:(id)arg1;

- (void)updateWithContext:(id)arg1;

@property(readonly, nonatomic) NSArray *visibleTileSets;

- (void)willStartLoadingTiles;



@end


