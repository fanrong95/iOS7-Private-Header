/*

 *     Generated by class-dump 3.4 (64 bit).

 *

 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.

 */





#import "DATask.h"

#import "NSURLConnectionDelegate.h"



@class ASItem, ASParseContext, ASTaskManager, DATaskManager, NSDate, NSError, NSHTTPURLResponse, NSMutableSet, NSString, NSTimer, NSURLConnection, NSURLRequest;



@interface ASTask : NSObject <DATask, NSURLConnectionDelegate>

{

    _Bool _haveSwitchedCodePage;

    _Bool _haveParsedCommand;

    ASItem *_currentlyParsingItem;

    id _delegate;

    NSHTTPURLResponse *_response;

    ASParseContext *_parseContext;

    NSURLConnection *_connection;

    NSURLRequest *_request;

    NSMutableSet *_attemptedIdentities;

    _Bool _isFakingIt;

    _Bool _didSendRequest;

    _Bool _didFailWithError;

    _Bool _didCancel;

    _Bool _didReceiveResponse;

    _Bool _didReceiveData;

    _Bool _didFinishLoading;

    _Bool _didReset;

    _Bool _finished;

    _Bool _inDelegateCallout;

    _Bool _finishedByTimeoutEnforcer;

    int _interfaceBinding;

    void *_context;

    _Bool _isExclusive;

    int _numBadPasswordResponses;

    _Bool _askedToCancelWhileModal;

    _Bool _haveCheckedForTopLevelError;

    _Bool _handledTopLevelError;

    int _taskID;

    ASTaskManager *_taskManager;

    int _modalReason;

    int _modalPushCount;

    NSString *_lastKnownPolicyKey;

    NSError *_passwordNotificationError;

    NSString *_lastKnownPassword;

    NSDate *_dateConnectionWentOut;

    NSTimer *_timeoutEnforcer;

    _Bool _retry;

}



+ (void)_restoreDefaultTaskTimeout;

+ (void)_setDefaultTaskTimeout:(double)arg1;

- (id)_HTTPMethodForRequest:(id)arg1;

- (void)_addAuthToRequest:(id)arg1;

- (void)_addDeviceManagementIdToRequest:(id)arg1;

- (id)_applyAuthenticationChain:(struct __CFArray *)arg1 toRequest:(id)arg2;

- (id)_connectionForLogging;

- (void)_continuePerformTask;

- (id)_easVersion;

- (void)_failImmediately;

- (void)_handleBadPasswordResponse;

- (_Bool)_handleCertificateError:(id)arg1;

- (_Bool)_handleRedirect:(id)arg1;

- (void)_initFakeParseContext;

- (_Bool)_isWBXML;

- (id)_policyKey;

- (void)_popModal;

- (void)_pushModalForReason:(int)arg1;

- (id)_requestForLogging;

- (void)_setHTTPParametersOnRequest:(id)arg1 outBodyStream:(id *)arg2 outBodyData:(id *)arg3;

- (_Bool)_shouldRedirectToHTTPForRequest:(id)arg1;

- (_Bool)_shouldSendAuthForRequest:(id)arg1;

- (void)_timeoutEnforcerFired:(id)arg1;

- (id)_url;

@property(nonatomic) _Bool askedToCancelWhileModal; // @synthesize askedToCancelWhileModal=_askedToCancelWhileModal;

- (_Bool)attemptRetryWithStatus:(int)arg1 error:(id)arg2;

- (void)cancelTaskWithReason:(int)arg1 underlyingError:(id)arg2;

- (_Bool)checkForErrorInContext:(id)arg1;

- (id)command;

- (int)commandCode;

- (_Bool)connection:(id)arg1 canAuthenticateAgainstProtectionSpace:(id)arg2;

- (void)connection:(id)arg1 didFailWithError:(id)arg2;

- (void)connection:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2;

- (void)connection:(id)arg1 didReceiveData:(id)arg2;

- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;

- (void)connection:(id)arg1 didSendBodyData:(long long)arg2 totalBytesWritten:(long long)arg3 totalBytesExpectedToWrite:(long long)arg4;

- (id)connection:(id)arg1 needNewBodyStream:(id)arg2;

- (id)connection:(id)arg1 willSendRequest:(id)arg2 redirectResponse:(id)arg3;

- (void)connectionDidFinishLoading:(id)arg1;

- (id)contentType;

@property(nonatomic) void *context; // @synthesize context=_context;

@property(retain, nonatomic) ASItem *currentlyParsingItem; // @synthesize currentlyParsingItem=_currentlyParsingItem;

- (void)dealloc;

@property(nonatomic) id delegate; // @synthesize delegate=_delegate;

- (id)description;

- (void)didCallOutToDelegate;

- (void)didProcessContext:(id)arg1;

- (void)finishWithError:(id)arg1;

- (_Bool)getTopLevelToken:(char *)arg1 outStatusCodePage:(char *)arg2 outStatusToken:(char *)arg3;

- (void)handleTopLevelErrorStatus:(id)arg1;

- (id)httpMethod;

- (id)init;

@property(nonatomic) int interfaceBinding; // @synthesize interfaceBinding=_interfaceBinding;

@property(nonatomic) _Bool isExclusive; // @synthesize isExclusive=_isExclusive;

- (_Bool)isInCallOutToDelegate;

@property(retain, nonatomic) NSString *lastKnownPassword; // @synthesize lastKnownPassword=_lastKnownPassword;

- (void)loadRequest:(id)arg1;

- (int)numDownloadedElements;

- (id)parameterData;

- (double)percentComplete;

- (void)performTask;

- (_Bool)processContext:(id)arg1;

- (void)reportStatusWithError:(id)arg1;

- (id)requestBody;

- (id)requestBodyStreamOutKnownSize:(int *)arg1;

- (_Bool)requiresEASVersionInformaton;

- (_Bool)requiresEASVersionUpdate;

- (void)reset;

- (id)responseContentType;

@property(nonatomic) DATaskManager *taskManager; // @synthesize taskManager=_taskManager;

@property(retain, nonatomic) NSTimer *timeoutEnforcer; // @synthesize timeoutEnforcer=_timeoutEnforcer;

- (_Bool)shouldHandlePasswordErrors;

- (_Bool)shouldHoldPowerAssertion;

- (_Bool)shouldLogIncomingData;

- (_Bool)shouldReportTimeInNetwork;

- (_Bool)shouldStallAfterConnectionLost;

- (void)startModal;

- (int)taskID;

- (void)taskManagerDidFailToUpdatePolicyKey;

- (void)taskManagerDidFindEASVersion;

- (void)taskManagerDidUpdatePolicyKey;

- (int)taskStatusForError:(id)arg1;

- (int)taskStatusForExchangeStatus:(int)arg1;

- (void)tearDownResources;

- (double)timeoutInterval;

- (void)willCallOutToDelegate;

- (void)willProcessContext;



@end


