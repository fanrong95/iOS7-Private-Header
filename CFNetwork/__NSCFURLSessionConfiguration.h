/*

 *     Generated by class-dump 3.4 (64 bit).

 *

 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.

 */





#import "NSCopying.h"

#import "NSSecureCoding.h"



@class NSArray, NSDictionary, NSHTTPCookieStorage, NSString, NSURLCache, NSURLCredentialStorage;



__attribute__((visibility("hidden")))

@interface __NSCFURLSessionConfiguration : NSObject <NSCopying, NSSecureCoding>

{

    struct __CFURLStorageSession *_legacyStorageSystem;

    _Bool _backgroundSession;

    _Bool _allowsCellularAccess;

    _Bool _discretionary;

    _Bool _sessionSendsLaunchEvents;

    _Bool _HTTPShouldUsePipelining;

    _Bool _HTTPShouldSetCookies;

    _Bool __credStorageSet;

    _Bool __urlCacheSet;

    _Bool __cookieStorageSet;

    _Bool _tasks_created_suspended;

    _Bool _skip_download_unlink;

    _Bool __preventsIdleSleep;

    _Bool __usePipeliningHeuristics;

    _Bool __startSynchronously;

    int _TLSMinimumSupportedProtocol;

    int _TLSMaximumSupportedProtocol;

    NSString *_identifier;

    unsigned long long _requestCachePolicy;

    double _timeoutIntervalForRequest;

    double _timeoutIntervalForResource;

    unsigned long long _networkServiceType;

    NSDictionary *_connectionProxyDictionary;

    unsigned long long _HTTPCookieAcceptPolicy;

    NSDictionary *_HTTPAdditionalHeaders;

    long long _HTTPMaximumConnectionsPerHost;

    NSArray *_protocolClasses;

    NSURLCredentialStorage *__credStorage;

    NSURLCache *__urlCache;

    NSHTTPCookieStorage *__cookieStorage;

    NSString *_disposition;

    struct _CFHSTSPolicy *_HSTSPolicy;

    double _connectionCachePurgeTimeout;

    double _connectionCacheCellPurgeTimeout;

    NSDictionary *__cfurlConnectionProperties;

    NSDictionary *__socketStreamProperties;

    NSArray *__contentDispHeadEncFallback;

}



+ (id)backgroundSessionConfiguration:(id)arg1;

+ (id)defaultSessionConfiguration;

+ (id)ephemeralSessionConfiguration;

+ (_Bool)supportsSecureCoding;

@property(retain) struct _CFHSTSPolicy *HSTSPolicy; // @synthesize HSTSPolicy=_HSTSPolicy;

@property(copy) NSDictionary *HTTPAdditionalHeaders; // @synthesize HTTPAdditionalHeaders=_HTTPAdditionalHeaders;

@property unsigned long long HTTPCookieAcceptPolicy; // @synthesize HTTPCookieAcceptPolicy=_HTTPCookieAcceptPolicy;

@property(retain, getter=HTTPCookieStorage, setter=setHTTPCookieStorage:) NSHTTPCookieStorage *HTTPCookieStorage;

@property long long HTTPMaximumConnectionsPerHost; // @synthesize HTTPMaximumConnectionsPerHost=_HTTPMaximumConnectionsPerHost;

@property _Bool HTTPShouldSetCookies; // @synthesize HTTPShouldSetCookies=_HTTPShouldSetCookies;

@property _Bool HTTPShouldUsePipelining; // @synthesize HTTPShouldUsePipelining=_HTTPShouldUsePipelining;

@property int TLSMaximumSupportedProtocol; // @synthesize TLSMaximumSupportedProtocol=_TLSMaximumSupportedProtocol;

@property int TLSMinimumSupportedProtocol; // @synthesize TLSMinimumSupportedProtocol=_TLSMinimumSupportedProtocol;

@property(retain, getter=URLCache, setter=setURLCache:) NSURLCache *URLCache;

@property(retain, getter=URLCredentialStorage, setter=setURLCredentialStorage:) NSURLCredentialStorage *URLCredentialStorage;

@property(copy) NSDictionary *_cfurlConnectionProperties; // @synthesize _cfurlConnectionProperties=__cfurlConnectionProperties;

@property(copy) NSArray *_contentDispHeadEncFallback; // @synthesize _contentDispHeadEncFallback=__contentDispHeadEncFallback;

@property(retain) NSHTTPCookieStorage *_cookieStorage; // @synthesize _cookieStorage=__cookieStorage;

@property _Bool _cookieStorageSet; // @synthesize _cookieStorageSet=__cookieStorageSet;

@property(retain) NSURLCredentialStorage *_credStorage; // @synthesize _credStorage=__credStorage;

@property _Bool _credStorageSet; // @synthesize _credStorageSet=__credStorageSet;

@property _Bool _preventsIdleSleep; // @synthesize _preventsIdleSleep=__preventsIdleSleep;

@property(copy) NSDictionary *_socketStreamProperties; // @synthesize _socketStreamProperties=__socketStreamProperties;

@property _Bool _startSynchronously; // @synthesize _startSynchronously=__startSynchronously;

@property(retain) NSURLCache *_urlCache; // @synthesize _urlCache=__urlCache;

@property _Bool _urlCacheSet; // @synthesize _urlCacheSet=__urlCacheSet;

@property _Bool _usePipeliningHeuristics; // @synthesize _usePipeliningHeuristics=__usePipeliningHeuristics;

@property _Bool allowsCellularAccess; // @synthesize allowsCellularAccess=_allowsCellularAccess;

@property double connectionCacheCellPurgeTimeout; // @synthesize connectionCacheCellPurgeTimeout=_connectionCacheCellPurgeTimeout;

@property double connectionCachePurgeTimeout; // @synthesize connectionCachePurgeTimeout=_connectionCachePurgeTimeout;

@property(copy) NSDictionary *connectionProxyDictionary; // @synthesize connectionProxyDictionary=_connectionProxyDictionary;

- (id)copyWithZone:(struct _NSZone *)arg1;

- (void)dealloc;

@property NSString *disposition; // @synthesize disposition=_disposition;

- (void)encodeWithCoder:(id)arg1;

@property(copy) NSString *identifier; // @synthesize identifier=_identifier;

- (id)initWithCoder:(id)arg1;

- (id)initWithDisposition:(id)arg1;

@property(getter=isBackgroundSession) _Bool backgroundSession; // @synthesize backgroundSession=_backgroundSession;

@property(getter=isDiscretionary) _Bool discretionary; // @synthesize discretionary=_discretionary;

@property unsigned long long networkServiceType; // @synthesize networkServiceType=_networkServiceType;

@property(copy) NSArray *protocolClasses; // @synthesize protocolClasses=_protocolClasses;

@property unsigned long long requestCachePolicy; // @synthesize requestCachePolicy=_requestCachePolicy;

@property _Bool sessionSendsLaunchEvents; // @synthesize sessionSendsLaunchEvents=_sessionSendsLaunchEvents;

@property _Bool skip_download_unlink; // @synthesize skip_download_unlink=_skip_download_unlink;

@property _Bool tasks_created_suspended; // @synthesize tasks_created_suspended=_tasks_created_suspended;

@property double timeoutIntervalForRequest; // @synthesize timeoutIntervalForRequest=_timeoutIntervalForRequest;

@property double timeoutIntervalForResource; // @synthesize timeoutIntervalForResource=_timeoutIntervalForResource;



@end


