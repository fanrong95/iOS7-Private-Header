/*

 *     Generated by class-dump 3.4 (64 bit).

 *

 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.

 */





#import "NSCopying.h"

#import "NSSecureCoding.h"



@interface NSExpression : NSObject <NSSecureCoding, NSCopying>

{

    struct _expressionFlags {

        unsigned int _evaluationBlocked:1;

        unsigned int _reservedExpressionFlags:31;

    } _expressionFlags;

    unsigned int reserved;

    unsigned long long _expressionType;

}



+ (id)_newKeyPathExpressionForString:(id)arg1;

+ (id)expressionForAggregate:(id)arg1;

+ (id)expressionForAnyKey;

+ (id)expressionForBlock:(id)arg1 arguments:(void)arg2;

+ (id)expressionForConstantValue:(id)arg1;

+ (id)expressionForEvaluatedObject;

+ (id)expressionForFunction:(id)arg1 arguments:(id)arg2;

+ (id)expressionForFunction:(id)arg1 selectorName:(id)arg2 arguments:(id)arg3;

+ (id)expressionForIntersectSet:(id)arg1 with:(id)arg2;

+ (id)expressionForKeyPath:(id)arg1;

+ (id)expressionForMinusSet:(id)arg1 with:(id)arg2;

+ (id)expressionForSubquery:(id)arg1 usingIteratorVariable:(id)arg2 predicate:(id)arg3;

+ (id)expressionForSymbolicString:(id)arg1;

+ (id)expressionForTernaryWithPredicate:(id)arg1 trueExpression:(id)arg2 falseExpression:(id)arg3;

+ (id)expressionForUnionSet:(id)arg1 with:(id)arg2;

+ (id)expressionForVariable:(id)arg1;

+ (id)expressionForVariableNameAssignment:(id)arg1 expression:(id)arg2;

+ (id)expressionWithFormat:(id)arg1;

+ (id)expressionWithFormat:(id)arg1 argumentArray:(id)arg2;

+ (id)expressionWithFormat:(id)arg1 arguments:(struct __va_list_tag [1])arg2;

+ (_Bool)supportsSecureCoding;

- (_Bool)_allowsEvaluation;

- (id)_expressionWithSubstitutionVariables:(id)arg1;

- (_Bool)_shouldUseParensWithDescription;

- (void)acceptVisitor:(id)arg1 flags:(unsigned long long)arg2;

- (void)allowEvaluation;

- (id)arguments;

- (id)collection;

- (id)constantValue;

- (id)copyWithZone:(struct _NSZone *)arg1;

- (id)description;

- (void)encodeWithCoder:(id)arg1;

- (id)expressionBlock;

- (unsigned long long)expressionType;

- (id)expressionValueWithObject:(id)arg1 context:(id)arg2;

- (id)falseExpression;

- (id)function;

- (id)initWithCoder:(id)arg1;

- (id)initWithExpressionType:(unsigned long long)arg1;

- (id)keyPath;

- (id)leftExpression;

- (id)operand;

- (id)predicate;

- (id)predicateFormat;

- (id)rightExpression;

- (SEL)selector;

- (id)subexpression;

- (id)trueExpression;

- (id)variable;



@end


