/*

 *     Generated by class-dump 3.4 (64 bit).

 *

 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.

 */



#import "NSNumber.h"


@interface NSDecimalNumber : NSNumber

{

    unsigned int _exponent:8;

    unsigned int _length:4;

    unsigned int _isNegative:1;

    unsigned int _isCompact:1;

    unsigned int _reserved:1;

    unsigned int _hasExternalRefCount:1;

    unsigned int _refs:16;

    unsigned short _mantissa[0];

}



+ (id)allocWithZone:(struct _NSZone *)arg1;

+ (id)decimalNumberWithDecimal:(CDStruct_5fe7aead)arg1;

+ (id)decimalNumberWithMantissa:(unsigned long long)arg1 exponent:(short)arg2 isNegative:(_Bool)arg3;

+ (id)decimalNumberWithString:(id)arg1;

+ (id)decimalNumberWithString:(id)arg1 locale:(id)arg2;

+ (id)defaultBehavior;

+ (id)maximumDecimalNumber;

+ (id)minimumDecimalNumber;

+ (id)notANumber;

+ (id)numberWithBool:(_Bool)arg1;

+ (id)numberWithChar:(BOOL)arg1;

+ (id)numberWithDouble:(double)arg1;

+ (id)numberWithFloat:(float)arg1;

+ (id)numberWithInt:(int)arg1;

+ (id)numberWithInteger:(long long)arg1;

+ (id)numberWithLong:(long long)arg1;

+ (id)numberWithLongLong:(long long)arg1;

+ (id)numberWithShort:(short)arg1;

+ (id)numberWithUnsignedChar:(unsigned char)arg1;

+ (id)numberWithUnsignedInt:(unsigned int)arg1;

+ (id)numberWithUnsignedInteger:(unsigned long long)arg1;

+ (id)numberWithUnsignedLong:(unsigned long long)arg1;

+ (id)numberWithUnsignedLongLong:(unsigned long long)arg1;

+ (id)numberWithUnsignedShort:(unsigned short)arg1;

+ (id)one;

+ (void)setDefaultBehavior:(id)arg1;

+ (_Bool)supportsSecureCoding;

+ (id)zero;

- (_Bool)_getCString:(char *)arg1 length:(int)arg2 multiplier:(double)arg3;

- (_Bool)boolValue;

- (BOOL)charValue;

- (Class)classForCoder;

- (long long)compare:(id)arg1;

- (id)copy;

- (id)copyWithZone:(struct _NSZone *)arg1;

- (id)decimalNumberByAdding:(id)arg1;

- (id)decimalNumberByAdding:(id)arg1 withBehavior:(id)arg2;

- (id)decimalNumberByDividingBy:(id)arg1;

- (id)decimalNumberByDividingBy:(id)arg1 withBehavior:(id)arg2;

- (id)decimalNumberByMultiplyingBy:(id)arg1;

- (id)decimalNumberByMultiplyingBy:(id)arg1 withBehavior:(id)arg2;

- (id)decimalNumberByMultiplyingByPowerOf10:(short)arg1;

- (id)decimalNumberByMultiplyingByPowerOf10:(short)arg1 withBehavior:(id)arg2;

- (id)decimalNumberByRaisingToPower:(unsigned long long)arg1;

- (id)decimalNumberByRaisingToPower:(unsigned long long)arg1 withBehavior:(id)arg2;

- (id)decimalNumberByRoundingAccordingToBehavior:(id)arg1;

- (id)decimalNumberBySubstracting:(id)arg1;

- (id)decimalNumberBySubstracting:(id)arg1 withBehavior:(id)arg2;

- (id)decimalNumberBySubtracting:(id)arg1;

- (id)decimalNumberBySubtracting:(id)arg1 withBehavior:(id)arg2;

- (CDStruct_5fe7aead)decimalValue;

- (id)description;

- (id)descriptionWithLocale:(id)arg1;

- (double)doubleValue;

- (void)encodeWithCoder:(id)arg1;

- (float)floatValue;

- (void)getValue:(void *)arg1;

- (id)initWithCoder:(id)arg1;

- (id)initWithDecimal:(CDStruct_5fe7aead)arg1;

- (id)initWithMantissa:(unsigned long long)arg1 exponent:(short)arg2 isNegative:(_Bool)arg3;

- (id)initWithString:(id)arg1;

- (id)initWithString:(id)arg1 locale:(id)arg2;

- (int)intValue;

- (_Bool)isEqual:(id)arg1;

- (long long)longLongValue;

- (long long)longValue;

- (const char *)objCType;

- (short)shortValue;

- (unsigned char)unsignedCharValue;

- (unsigned int)unsignedIntValue;

- (unsigned long long)unsignedLongLongValue;

- (unsigned long long)unsignedLongValue;

- (unsigned short)unsignedShortValue;



@end


