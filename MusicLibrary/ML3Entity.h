/*

 *     Generated by class-dump 3.4 (64 bit).

 *

 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.

 */





@class ML3MusicLibrary;



@interface ML3Entity : NSObject

{

    ML3MusicLibrary *_library;

    long long _persistentID;

}



+ (_Bool)_deleteRowForPersistentIDs:(const long long *)arg1 count:(unsigned long long)arg2 library:(id)arg3 table:(id)arg4 usingColumn:(id)arg5;

+ (_Bool)_shouldIncrementRevisionForType:(int)arg1 persistentID:(long long)arg2 usingConnection:(id)arg3;

+ (id)aggregateQueryWithUnitQuery:(id)arg1 foreignPersistentIDProperty:(id)arg2;

+ (id)allProperties;

+ (id)anyInLibrary:(id)arg1 predicate:(id)arg2;

+ (id)collectionClassesToUpdateBeforeDelete;

+ (id)countingQueryForBaseQuery:(id)arg1 countProperty:(id)arg2 forIdentifier:(long long)arg3;

+ (id)defaultFilterPredicates;

+ (id)defaultOrderingProperties;

+ (_Bool)deleteFromLibrary:(id)arg1 deletionType:(int)arg2 persistentIDs:(const long long *)arg3 count:(unsigned long long)arg4;

+ (id)directCollectionQueryWithAggregateQuery:(id)arg1 predicate:(id)arg2 usingSections:(_Bool)arg3;

+ (id)disambiguatedSQLForProperty:(id)arg1;

+ (id)disambiguatedSelectSQLForProperty:(id)arg1;

+ (void)enumeratePersistentIDsInLibrary:(id)arg1 afterRevision:(long long)arg2 usingBlock:(id)arg3;

+ (void)enumeratePersistentIDsInLibrary:(id)arg1 matchingPredicate:(id)arg2 orderingTerms:(id)arg3 persistentIDs:(const long long *)arg4 count:(unsigned long long)arg5 usingBlock:(id)arg6;

+ (id)extraTablesToDelete;

+ (id)extraTablesToInsert;

+ (id)foreignColumnForProperty:(id)arg1;

+ (id)foreignDatabaseTableForProperty:(id)arg1;

+ (id)foreignPropertyForProperty:(id)arg1 entityClass:(Class)arg2;

+ (_Bool)incrementRevisionForRevisionTypeContentWithLibrary:(id)arg1 deletionType:(int)arg2 persistentIDs:(id)arg3;

+ (_Bool)incrementRevisionForRevisionTypeContentWithLibrary:(id)arg1 deletionType:(int)arg2 persistentIDs:(const long long *)arg3 count:(unsigned long long)arg4;

+ (_Bool)incrementRevisionWithLibrary:(id)arg1 persistentID:(long long)arg2 deletionType:(int)arg3 revisionType:(int)arg4;

+ (_Bool)incrementRevisionWithLibrary:(id)arg1 persistentID:(long long)arg2 deletionType:(int)arg3 revisionType:(int)arg4 usingConnection:(id)arg5;

+ (id)indexableSQLForProperties:(id)arg1;

+ (_Bool)insertValues:(id)arg1 intoTable:(id)arg2 persistentID:(long long)arg3 connection:(id)arg4;

+ (_Bool)insertValues:(id)arg1 intoTable:(id)arg2 persistentID:(long long)arg3 library:(id)arg4;

+ (_Bool)insertionChangesLibraryContents;

+ (id)joinClausesForProperty:(id)arg1;

+ (_Bool)libraryContentsChangeForProperty:(id)arg1;

+ (_Bool)libraryDynamicChangeForProperty:(id)arg1;

+ (id)newSelectAllEntitiesSQLForProperties:(const id *)arg1 count:(unsigned long long)arg2 predicate:(id)arg3;

+ (id)newSelectSQLForProperties:(const id *)arg1 count:(unsigned long long)arg2 predicate:(id)arg3;

+ (id)newWithDictionary:(id)arg1 inLibrary:(id)arg2;

+ (id)newWithDictionary:(id)arg1 inLibrary:(id)arg2 cachedNameOrders:(id)arg3;

+ (id)newWithPersistentID:(long long)arg1 inLibrary:(id)arg2;

+ (id)orderingSQLForProperties:(id)arg1 directionality:(id)arg2;

+ (id)persistentIDColumnForTable:(id)arg1;

+ (id)predicateByOptimizingComparisonPredicate:(id)arg1;

+ (id)predicateByOptimizingPredicate:(id)arg1;

+ (id)predicateIncludingSystemwidePredicatesWithPredicate:(id)arg1 library:(id)arg2;

+ (void)predisambiguateProperties:(id)arg1 toDictionary:(id)arg2;

+ (id)predisambiguatedProperties;

+ (_Bool)propertyIsCountProperty:(id)arg1;

+ (id)queryWithLibrary:(id)arg1 predicate:(id)arg2;

+ (id)queryWithLibrary:(id)arg1 predicate:(id)arg2 orderingProperties:(id)arg3;

+ (id)queryWithLibrary:(id)arg1 predicate:(id)arg2 orderingProperties:(id)arg3 usingSections:(_Bool)arg4;

+ (id)queryWithLibrary:(id)arg1 predicate:(id)arg2 orderingTerms:(id)arg3;

+ (id)queryWithLibrary:(id)arg1 predicate:(id)arg2 orderingTerms:(id)arg3 propertyToCount:(id)arg4;

+ (id)queryWithLibrary:(id)arg1 predicate:(id)arg2 orderingTerms:(id)arg3 usingSections:(_Bool)arg4;

+ (id)queryWithLibrary:(id)arg1 predicate:(id)arg2 usingSections:(_Bool)arg3;

+ (id)replacerWithProperties:(id)arg1 library:(id)arg2;

+ (long long)revisionTrackingCode;

+ (id)sectionPropertyForProperty:(id)arg1;

+ (id)subselectPropertyForProperty:(id)arg1;

+ (id)subselectStatementForProperty:(id)arg1;

+ (id)unsettableProperties;

- (void).cxx_destruct;

- (id)copyInLibrary:(id)arg1;

- (id)copyWithZone:(struct _NSZone *)arg1;

- (_Bool)deleteFromLibrary;

- (id)description;

- (void)didChangeValueForProperties:(id)arg1;

@property(readonly) _Bool existsInLibrary;

- (void)getValues:(id *)arg1 forProperties:(const id *)arg2 count:(unsigned long long)arg3;

- (unsigned long long)hash;

- (void)incrementRevision;

- (id)initWithDictionary:(id)arg1 inLibrary:(id)arg2 cachedNameOrders:(id)arg3;

- (id)initWithPersistentID:(long long)arg1 inLibrary:(id)arg2;

- (_Bool)isEqual:(id)arg1;

@property __weak ML3MusicLibrary *library; // @synthesize library=_library;

- (_Bool)matchesPredicate:(id)arg1;

@property(readonly) long long persistentID; // @synthesize persistentID=_persistentID;

- (_Bool)setValue:(id)arg1 forProperty:(id)arg2;

- (_Bool)setValues:(id)arg1 forProperties:(id)arg2;

- (void)setValues:(id)arg1 forProperties:(id)arg2 async:(_Bool)arg3 withCompletionBlock:(id)arg4;

- (_Bool)setValues:(const id *)arg1 forProperties:(const id *)arg2 count:(unsigned long long)arg3;

- (_Bool)setValuesForPropertiesWithDictionary:(id)arg1;

- (id)valueForProperty:(id)arg1;



@end


