/*

 *     Generated by class-dump 3.4 (64 bit).

 *

 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.

 */





#import "ML3DatabaseConnectionDelegate.h"

#import "ML3DatabaseConnectionPoolDelegate.h"



@class ML3AccountCacheDatabase, ML3ArtworkUtility, ML3Container, ML3DatabaseConnection, ML3DatabaseConnectionPool, ML3DatabaseMetadata, NSArray, NSCountedSet, NSMutableArray, NSMutableDictionary, NSObject<OS_dispatch_queue>, NSString, SBCPlaybackPositionServiceProxy, _LibraryNotification;



@interface ML3MusicLibrary : NSObject <ML3DatabaseConnectionDelegate, ML3DatabaseConnectionPoolDelegate>

{

    NSString *_libraryUID;

    NSObject<OS_dispatch_queue> *_atomicityQueue;

    _Bool _reloadForMediaServiceNeeded;

    ML3AccountCacheDatabase *_accountCacheDatabase;

    ML3DatabaseConnection *_geniusDatabase;

    SBCPlaybackPositionServiceProxy *_uppService;

    NSCountedSet *_notifyNamesToIgnore;

    NSMutableArray *_pendingNotifyPostNames;

    NSMutableDictionary *_pendingLocalNotificationsToPost;

    _LibraryNotification *_libraryChangedNotify;

    _LibraryNotification *_nonContentsNotify;

    _LibraryNotification *_invisiblePropertyNotify;

    _LibraryNotification *_displayValuesNotify;

    _LibraryNotification *_syncGenerationNotify;

    _LibraryNotification *_libraryUIDNotify;

    int _systemLanguageChangedToken;

    id _mcSettingsObserver;

    id _loggingObserver;

    int _willDeleteDatabaseNotifyToken;

    ML3ArtworkUtility *_artworkUtility;

    struct iPhoneSortKeyBuilder *_sortKeyBuilder;

    _Bool _isHomeSharingLibraryLoaded;

    _Bool _isHomeSharingLibrary;

    _Bool _hasEverConnectedTo;

    _Bool _keepPresignedValidyAfterVerification;

    _Bool _currentThreadHasWriterConnectionCheckedOut;

    ML3DatabaseConnectionPool *_connectionPool;

    NSString *_databasePath;

    NSArray *_libraryEntityFilterPredicates;

    NSArray *_libraryContainerFilterPredicates;

}



+ (id)_purgeableTrackPredicateWithUrgency:(unsigned long long)arg1;

+ (id)allPragmaSQL;

+ (id)allSchemaSQL;

+ (id)allTables;

+ (id)allTriggersSQL;

+ (_Bool)buildDatabaseTablesUsingConnection:(id)arg1 popuplateDatabaseTablesOnConnectionBlock:(id)arg2;

+ (id)controlDirectoryPathWithBasePath:(id)arg1;

+ (_Bool)createIndexesUsingConnection:(id)arg1;

+ (_Bool)createTriggersUsingConnection:(id)arg1;

+ (long long)currentUserVersion;

+ (id)databasePathForUnitTest:(id)arg1 withBasePath:(id)arg2;

+ (_Bool)defaultExcludeFromShuffleForMediaType:(unsigned int)arg1;

+ (_Bool)defaultRememberBookmarkTimeForMediaType:(unsigned int)arg1;

+ (void)disableAutomaticDatabaseArtworkConversion;

+ (void)disableAutomaticDatabaseValidation;

+ (void)disableSharedLibrary;

+ (_Bool)dropIndexesUsingConnection:(id)arg1;

+ (_Bool)dropIndexesUsingConnection:(id)arg1 tableNames:(const char *)arg2;

+ (void)enumerateSortMapTablesUsingBlock:(id)arg1;

+ (id)fallbackGeniusDatabaseFilePath;

+ (id)geniusDatabaseFilePath;

+ (_Bool)hasArtworkConversionManifestTasksRemainingUsingConnection:(id)arg1;

+ (_Bool)importationEnabled;

+ (_Bool)inTransactionUpdateSearchMapOnConnection:(id)arg1;

+ (_Bool)inTransactionUpdateSortMapOnConnection:(id)arg1 forceUpdateOriginals:(_Bool)arg2;

+ (id)indexSchemaSQL;

+ (void)initialize;

+ (id)itemIndexSchemaSQL;

+ (id)itemSchemaSQL;

+ (id)localizedSectionDictionary;

+ (id)localizedSectionHeaderForSectionHeader:(id)arg1;

+ (id)localizedSectionIndexTitleForSectionHeader:(id)arg1;

+ (id)localizedSortingDetailsDictionary;

+ (id)mediaFolderPath;

+ (id)mediaFolderRelativePath:(id)arg1;

+ (_Bool)migrateToCurrentUserVersionUsingConnection:(id)arg1 musicLibrary:(id)arg2;

+ (_Bool)orderingLanguageMatchesSystemUsingConnection:(id)arg1;

+ (id)pathForResourceFileOrFolder:(int)arg1;

+ (id)pathForResourceFileOrFolder:(int)arg1 basePath:(id)arg2 relativeToBase:(_Bool)arg3 createParentFolderIfNecessary:(_Bool)arg4;

+ (id)pathForResourceFileOrFolder:(int)arg1 basePath:(id)arg2 relativeToBase:(_Bool)arg3 isFolder:(_Bool *)arg4;

+ (_Bool)processHasDatabaseWritePermissions;

+ (void)resetArtworkConversionManifestFormatPairs:(id)arg1 usingConnection:(id)arg2;

+ (id)sectionIndexTitleForSectionHeader:(id)arg1;

+ (id)sectionIndexTitles;

+ (void)setImportationEnabled:(_Bool)arg1;

+ (id)sharedLibrary;

+ (id)sharedLibraryDatabasePath;

+ (id)sortMapNewSchemaSQL;

+ (id)sortMapSchemaSQL;

+ (id)storeLinkSchemaSQL;

+ (id)systemCurrentLanguage;

+ (id)unitTestableLibraryForTest:(id)arg1 basePath:(id)arg2 setupSQLFilenames:(id)arg3;

+ (_Bool)updateSortMapOnConnection:(id)arg1;

+ (_Bool)updateSortMapOnConnection:(id)arg1 forceUpdateOriginals:(_Bool)arg2;

+ (_Bool)updateTrackIntegrityOnConnection:(id)arg1;

+ (_Bool)userVersionMatchesSystemUsingConnection:(id)arg1;

+ (int)userVersionUsingConnection:(id)arg1;

- (void).cxx_destruct;

- (id)_artworkDataForCacheID:(id)arg1 formatID:(unsigned int)arg2 canCreateIfMissing:(_Bool)arg3;

- (id)_artworkMigrator;

- (_Bool)_canConfigureMediaLibraryDatabaseConnection:(id)arg1;

- (void)_configureMediaLibraryDatabaseConnection:(id)arg1;

- (void)_delayableNotifyPost:(id)arg1 localNotificationName:(id)arg2;

- (void)_enqueueLocalNotificationName:(id)arg1 isSourceExternal:(_Bool)arg2;

- (void)_enqueueNotifyPostName:(id)arg1;

- (void)_enumeratePurgeableTracksForUrgency:(unsigned long long)arg1 respectSongMattress:(_Bool)arg2 usingBlock:(id)arg3;

- (id)_existingArtworkDataForCacheID:(id)arg1 formatID:(unsigned int)arg2;

- (id)_newGeniusDBConnectionAtPath:(id)arg1;

- (void)_postChangeNotificationAndScheduleFlushLocalOnly:(_Bool)arg1;

- (void)_postDisplayValuesChangeNotificationLocalOnly:(_Bool)arg1;

- (void)_postInvisiblePropertyChangeNotificationAndScheduleFlushLocalOnly:(_Bool)arg1;

- (void)_postNonContentsChangeNotificationAndScheduleFlushLocalOnly:(_Bool)arg1;

- (void)_teardownMediaLibraryDatabaseConnection:(id)arg1;

- (void)_updateDatabaseConnectionsProfilingLevel;

- (void)accessSortKeyBuilder:(id)arg1;

- (id)accountCacheDatabase;

- (long long)addStringToSortMap:(id)arg1;

- (id)albumArtistForEffectiveAlbumArtistName:(id)arg1;

- (id)albumForAlbumArtistPersistentID:(long long)arg1 albumName:(id)arg2 feedURL:(id)arg3 seasonNumber:(id)arg4 compilation:(_Bool)arg5;

- (id)artistForArtistName:(id)arg1 seriesName:(id)arg2;

- (id)artistGroupingKeyForArtistName:(id)arg1 seriesName:(id)arg2;

- (id)artworkDataForCacheID:(id)arg1 formatID:(unsigned int)arg2;

@property(retain) ML3ArtworkUtility *artworkUtility; // @synthesize artworkUtility=_artworkUtility;

@property(readonly) long long autoFilledTracksTotalSize;

- (long long)autoFilledTracksTotalSizeWithUrgency:(unsigned long long)arg1;

- (long long)autoFilledTracksTotalSizeWithUrgency:(unsigned long long)arg1 respectSongMattress:(_Bool)arg2;

- (_Bool)automaticDatabaseValidationDisabled;

- (void)beginAutoConvertingArtworkFormats;

- (void)beginConvertingArtworkFormatsWithCompletionHandler:(id)arg1;

- (_Bool)buildDatabaseTables;

- (void)checkInDatabaseConnection:(id)arg1;

- (id)checkoutReaderConnection;

- (id)checkoutWriterConnection;

- (_Bool)coerceValidDatabase;

- (_Bool)compactArtwork;

- (id)composerForComposerName:(id)arg1;

- (void)connectionDidOpenDatabase:(id)arg1;

@property(retain) ML3DatabaseConnectionPool *connectionPool; // @synthesize connectionPool=_connectionPool;

- (void)connectionPool:(id)arg1 createdNewConnection:(id)arg2;

- (void)connectionWillCloseDatabase:(id)arg1;

- (void)connectionWillOpenDatabase:(id)arg1;

- (_Bool)createIndexes;

@property(readonly) long long currentContentRevision;

@property(readonly) ML3Container *currentDevicePurchasesPlaylist;

@property(readonly) long long currentRevision;

@property(readonly) _Bool currentThreadHasWriterConnectionCheckedOut; // @synthesize currentThreadHasWriterConnectionCheckedOut=_currentThreadHasWriterConnectionCheckedOut;

- (void)databaseConnectionAllowingWrites:(_Bool)arg1 withBlock:(id)arg2;

@property(readonly) ML3DatabaseMetadata *databaseInfo;

@property(retain) NSString *databasePath; // @synthesize databasePath=_databasePath;

- (void)dealloc;

- (_Bool)deleteAllArtwork;

- (_Bool)deleteAndRecreateDatabaseUsingConnection:(id)arg1;

- (_Bool)deleteArtworkForCacheID:(id)arg1;

- (_Bool)deleteArtworkForCacheID:(id)arg1 formatID:(unsigned int)arg2;

- (_Bool)deleteArtworkForCacheID:(id)arg1 formatID:(unsigned int)arg2 deleteAllFromConversionTable:(_Bool)arg3;

- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1;

- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1 urgency:(unsigned long long)arg2;

- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1 urgency:(unsigned long long)arg2 respectSongMattress:(_Bool)arg3;

- (_Bool)deleteDatabaseProperty:(id)arg1;

- (void)deleteFromArtworkConversionForCacheID:(id)arg1 fromFormatID:(unsigned int)arg2 toFormatID:(unsigned int)arg3;

- (void)deletePresignedValidity;

- (_Bool)dropItemIndexes;

- (_Bool)emptyAllTables;

- (void)enumeratePersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned long long)arg2 usingBlock:(id)arg3;

- (void)enumeratePersistentIDsAfterRevision:(long long)arg1 usingBlock:(id)arg2;

- (id)geniusDatabase;

- (id)genreForGenre:(id)arg1;

- (void)getChangedPersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(long long)arg2 usingBlock:(id)arg3;

- (id)groupingKeyForString:(id)arg1;

- (id)groupingKeysForStrings:(id)arg1;

- (_Bool)handleDatabaseValidation;

- (_Bool)handlePreprocessDatabase;

- (_Bool)handleSchemaUpgrade;

- (_Bool)hasArtworkForCacheID:(id)arg1;

- (_Bool)hasArtworkForCacheID:(id)arg1 ensureArtworkFileExists:(_Bool)arg2;

@property(readonly, nonatomic) _Bool hasEverConnectedToDatabase; // @synthesize hasEverConnectedToDatabase=_hasEverConnectedTo;

- (_Bool)hasPresignedValidity;

- (id)initWithPath:(id)arg1;

- (id)initWithPath:(id)arg1 readOnly:(_Bool)arg2 populateUnitTestTablesBlock:(id)arg3;

- (_Bool)insertArtworkWithImageData:(id)arg1 artworkCreationDirective:(CDStruct_06d3d77b)arg2 forCacheID:(id)arg3;

- (_Bool)insertArtworkWithImageData:(id)arg1 forCacheID:(id)arg2 forFormatID:(unsigned int)arg3;

- (long long)insertStringIntoSortMapNoTransaction:(id)arg1;

- (id)insertStringsIntoSortMap:(id)arg1;

- (id)insertStringsIntoSortMap:(id)arg1 didReSortMap:(_Bool *)arg2;

- (_Bool)isCurrentThreadInTransaction;

@property(nonatomic) _Bool isHomeSharingLibrary;

@property(nonatomic) _Bool keepPresignedValidyAfterVerification; // @synthesize keepPresignedValidyAfterVerification=_keepPresignedValidyAfterVerification;

@property(retain, nonatomic) NSArray *libraryContainerFilterPredicates; // @synthesize libraryContainerFilterPredicates=_libraryContainerFilterPredicates;

@property(retain, nonatomic) NSArray *libraryEntityFilterPredicates; // @synthesize libraryEntityFilterPredicates=_libraryEntityFilterPredicates;

@property(copy) NSString *libraryUID;

- (void)loadArtworkForCacheID:(id)arg1 formatID:(unsigned int)arg2 completionHandler:(id)arg3;

- (id)localizedSectionHeaderForSectionIndex:(unsigned long long)arg1;

@property(readonly) NSArray *localizedSectionIndexTitles;

- (id)locationKindForKind:(id)arg1;

@property(readonly) _Bool mediaRestrictionEnabled;

- (void)migratePresignedValidity;

- (CDStruct_912cb5d2)nameOrderForString:(id)arg1;

- (void)notifyContentsDidChange;

- (void)notifyDisplayValuesPropertyDidChange;

- (void)notifyInvisiblePropertyDidChange;

- (void)notifyNonContentsPropertyDidChange;

- (void)performDatabaseTransactionWithBlock:(id)arg1;

- (void)performReadOnlyDatabaseTransactionWithBlock:(id)arg1;

@property(readonly) long long persistentID;

- (_Bool)persistentID:(long long)arg1 changedAfterRevision:(long long)arg2 revisionTrackingCode:(long long)arg3;

- (_Bool)populateArtworkCacheWithArtworkData:(id)arg1 trackValues:(id)arg2;

- (_Bool)populateStaticItemsOfDynamicContainers;

@property(readonly) NSArray *preferredAudioTracks;

@property(readonly) NSArray *preferredSubtitleTracks;

- (_Bool)prepareUnitTestDatabaseWithSQLFromContentsOfFile:(id)arg1 error:(id *)arg2;

- (void)reconnectToDatabase;

- (_Bool)removeLocationsForItemsMissingAssets;

- (void)removeOrphanedTracks;

- (_Bool)removeSource:(int)arg1;

- (_Bool)removeSource:(int)arg1 fromTracksWithPersistentIDs:(id)arg2;

- (void)removeTombstonesForDeletedItems;

- (_Bool)requiresNonSchemaUpdatesOnConnection:(id)arg1;

- (_Bool)requiresSchemaOnlyUpdatesOnConnection:(id)arg1;

- (_Bool)resetAllContents;

- (void)savePlaylists;

- (void)savePlaylistsSinceRevision:(long long)arg1 withGrappaID:(unsigned int)arg2;

- (void)saveTrackMetadata;

- (void)saveTrackMetadataSinceRevision:(long long)arg1 withGrappaID:(unsigned int)arg2;

- (unsigned long long)sectionIndexTitleIndexForSectionIndex:(unsigned long long)arg1;

@property long long syncGenerationID;

- (_Bool)setValue:(id)arg1 forDatabaseProperty:(id)arg2;

@property(readonly) _Bool supportsUbiquitousPlaybackPositions;

- (void)updateArtworkFormatsWithArtworkCreationDirective:(CDStruct_06d3d77b)arg1 forCacheID:(id)arg2;

- (void)updateMusicLibraryByApplyingUbiquitousBookmarkMetadataToTrackWithPersistentID:(long long)arg1;

- (void)updateOrderingLanguagesForCurrentLanguage;

- (_Bool)updateSortMap;

- (_Bool)updateSystemPlaylistNamesForCurrentLanguage;

- (void)updateTrackIntegrity;

- (void)updateUbiquitousDatabaseByRemovingUbiquitousMetadataFromTrackWithPersistentID:(long long)arg1;

- (id)uppService;

- (_Bool)validateDatabaseWithTimeout:(double)arg1;

- (id)valueForDatabaseProperty:(id)arg1;

- (_Bool)verifyPresignedValidity;

- (_Bool)writeToDatabaseArtworkForCacheID:(id)arg1 length:(unsigned long long)arg2 formatID:(unsigned int)arg3 imageSubRect:(struct CGRect)arg4;



@end


