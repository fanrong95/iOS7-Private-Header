/*

 *     Generated by class-dump 3.4 (64 bit).

 *

 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.

 */





@class MFStream, NSArray, NSCondition, NSData, NSInvocation, NSString;



@interface _MFSocket : NSObject

{

    NSCondition *_condition;

    MFStream *_stream;

    NSString *_protocol;

    NSString *_host;

    NSString *_service;

    struct __CFString *_connectionServiceType;

    NSInvocation *_eventHandler;

    NSArray *_clientCertificates;

    int _lowThroughputCounter;

    int _numTimeoutSecs;

    _Bool _allowsTrustPrompt;

    _Bool _usesOpportunisticSockets;

    _Bool _socketCanRead;

    _Bool _socketCanWrite;

    NSString *_sourceApplicationBundleIdentifier;

    NSString *_accountIdentifier;

}



- (unsigned int)_bufferedByteCount;

- (_Bool)_startSSLHandshakeWithProtocol:(id)arg1 disableSSL2:(_Bool)arg2 errorPtr:(id *)arg3;

- (void)abort;

@property(copy, nonatomic) NSString *accountIdentifier; // @synthesize accountIdentifier=_accountIdentifier;

@property(nonatomic) _Bool allowsTrustPrompt; // @synthesize allowsTrustPrompt=_allowsTrustPrompt;

@property(retain, nonatomic) NSArray *clientCertificates; // @synthesize clientCertificates=_clientCertificates;

- (_Bool)connectToHost:(id)arg1 withPort:(unsigned int)arg2 service:(id)arg3;

- (void)dealloc;

- (void)enableExcessiveKeepaliveDetection:(_Bool)arg1;

- (void)enableThroughputMonitoring:(_Bool)arg1;

- (id)init;

@property(readonly, nonatomic) _Bool isCellularConnection;

@property(readonly, nonatomic) _Bool isReadable;

@property(readonly, nonatomic) _Bool isValid;

@property(readonly, nonatomic) _Bool isWritable;

- (long long)readBytes:(char *)arg1 length:(unsigned long long)arg2;

@property(readonly, nonatomic) NSString *remoteHostname;

@property(readonly, nonatomic) unsigned int remotePortNumber;

- (id)securityProtocol;

@property(readonly, nonatomic) NSArray *serverCertificates;

- (void)setConnectionServiceType:(struct __CFString *)arg1;

- (void)setEventHandler:(id)arg1;

- (_Bool)setSecurityProtocol:(id)arg1;

@property(copy, nonatomic) NSString *sourceApplicationBundleIdentifier; // @synthesize sourceApplicationBundleIdentifier=_sourceApplicationBundleIdentifier;

@property(nonatomic) int timeout; // @synthesize timeout=_numTimeoutSecs;

@property(nonatomic) _Bool usesOpportunisticSockets; // @synthesize usesOpportunisticSockets=_usesOpportunisticSockets;

@property(readonly, nonatomic) NSData *sourceIPAddress;

- (long long)writeBytes:(const char *)arg1 length:(unsigned long long)arg2;



@end


