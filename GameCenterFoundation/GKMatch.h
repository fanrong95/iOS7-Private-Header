/*

 *     Generated by class-dump 3.4 (64 bit).

 *

 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.

 */





#import "GKSessionDelegate.h"

#import "GKSessionPrivateDelegate.h"



@class GKConnection, GKSession, NSArray, NSData, NSDictionary, NSMutableArray, NSMutableDictionary, NSString;



@interface GKMatch : NSObject <GKSessionDelegate, GKSessionPrivateDelegate>

{

    unsigned char _version;

    _Bool _needHostScore;

    _Bool _hostScoreForQuery;

    unsigned int _packetSequenceNumber;

    id <GKMatchDelegate> _delegateWeak;

    GKSession *_session;

    GKConnection *_connection;

    unsigned long long _expectedPlayerCount;

    NSMutableDictionary *_playerEventQueues;

    NSMutableArray *_reinvitedPlayers;

    NSData *_selfBlob;

    id <GKMatchDelegate> _inviteDelegateWeak;

    NSMutableDictionary *_playerPushTokens;

    NSMutableArray *_opponentIDs;

    NSString *_rematchID;

    long long _rematchCount;

    NSDictionary *_networkStatistics;

    NSMutableDictionary *_hostScores;

    id _chooseHostCompletion;

}



- (void)acceptRelayResponse:(id)arg1 playerID:(id)arg2;

- (void)addHostScore:(int)arg1 forPlayer:(id)arg2;

- (id)allIDs;

- (void)calculateHostScore;

- (void)chooseBestHostPlayerWithCompletionHandler:(id)arg1;

@property(copy, nonatomic) id chooseHostCompletion; // @synthesize chooseHostCompletion=_chooseHostCompletion;

- (void)conditionallyReinvitePlayer:(id)arg1 sessionToken:(id)arg2;

- (void)conditionallyRelaunchPlayer:(id)arg1;

- (void)connectToNearbyPlayer:(id)arg1 withConnectionData:(id)arg2;

- (void)connectToPeersWithDictionaries:(id)arg1 version:(unsigned char)arg2 sessionToken:(id)arg3 cdxTicket:(id)arg4;

- (_Bool)connected:(id)arg1;

@property(retain, nonatomic) GKConnection *connection; // @synthesize connection=_connection;

- (id)dataFromBase64String:(id)arg1;

- (void)dealloc;

- (void)deferStateCallbackForPlayer:(id)arg1 state:(long long)arg2;

@property(nonatomic) id <GKMatchDelegate> delegate; // @synthesize delegate=_delegateWeak;

- (id)description;

- (void)disconnect;

@property(readonly, nonatomic) unsigned long long expectedPlayerCount; // @synthesize expectedPlayerCount=_expectedPlayerCount;

- (void)getLocalConnectionDataWithCompletionHandler:(id)arg1;

- (_Bool)haveAllHostScores;

@property(nonatomic) _Bool hostScoreForQuery; // @synthesize hostScoreForQuery=_hostScoreForQuery;

@property(retain, nonatomic) NSMutableDictionary *hostScores; // @synthesize hostScores=_hostScores;

- (id)init;

- (void)initRelayConnectionForPlayer:(id)arg1;

- (void)initRelayInfoFromCallback:(id)arg1 forPlayer:(id)arg2;

- (void)initRelayInfoFromPush:(id)arg1 forPlayer:(id)arg2;

- (void)initRelayInfoFromServerResponse:(id)arg1 forPlayer:(id)arg2;

- (void)initRelayResponse:(id)arg1 playerID:(id)arg2;

@property(nonatomic) id <GKMatchDelegate> inviteDelegate; // @synthesize inviteDelegate=_inviteDelegateWeak;

- (void)inviteeComboMatched:(long long)arg1;

- (void)localPlayerDidChange:(id)arg1;

- (id)nearbyConnectionData;

@property(nonatomic) _Bool needHostScore; // @synthesize needHostScore=_needHostScore;

@property(retain, nonatomic) NSDictionary *networkStatistics; // @synthesize networkStatistics=_networkStatistics;

@property(retain, nonatomic) NSMutableArray *opponentIDs; // @synthesize opponentIDs=_opponentIDs;

- (id)packet:(unsigned char)arg1 data:(id)arg2;

@property(nonatomic) unsigned int packetSequenceNumber; // @synthesize packetSequenceNumber=_packetSequenceNumber;

- (id)peerFromPlayer:(id)arg1;

@property(retain, nonatomic) NSMutableDictionary *playerEventQueues; // @synthesize playerEventQueues=_playerEventQueues;

- (id)playerFromPeer:(id)arg1;

@property(readonly, nonatomic) NSArray *playerIDs;

@property(retain, nonatomic) NSMutableDictionary *playerPushTokens; // @synthesize playerPushTokens=_playerPushTokens;

- (void)preLoadInviter:(id)arg1 sessionToken:(id)arg2;

- (void)preemptRelay:(id)arg1;

- (void)queueData:(id)arg1 forPlayer:(id)arg2;

- (void)receiveData:(id)arg1 fromPeer:(id)arg2 inSession:(id)arg3 context:(void *)arg4;

- (void)receivedChooseHostData:(id)arg1 fromPlayer:(id)arg2;

@property(retain, nonatomic) NSMutableArray *reinvitedPlayers; // @synthesize reinvitedPlayers=_reinvitedPlayers;

- (void)reinviteeAcceptedNotification:(id)arg1;

- (void)reinviteeDeclinedNotification:(id)arg1;

- (void)relayPush:(id)arg1;

- (void)relayPushNotification:(id)arg1;

@property(nonatomic) long long rematchCount; // @synthesize rematchCount=_rematchCount;

@property(retain, nonatomic) NSString *rematchID; // @synthesize rematchID=_rematchID;

- (void)rematchWithCompletionHandler:(id)arg1;

- (void)requestRelayInitForPlayer:(id)arg1;

- (void)requestRelayUpdateForPlayer:(id)arg1;

- (_Bool)selectHostIfRequestedAndAllScored;

@property(retain, nonatomic) NSData *selfBlob; // @synthesize selfBlob=_selfBlob;

- (void)sendData:(id)arg1 fromPlayer:(id)arg2;

- (_Bool)sendData:(id)arg1 toPlayers:(id)arg2 withDataMode:(long long)arg3 error:(id *)arg4;

- (_Bool)sendDataToAllPlayers:(id)arg1 withDataMode:(long long)arg2 error:(id *)arg3;

- (void)sendHostScoreAsQuery:(_Bool)arg1;

- (_Bool)sendInviteData:(id)arg1 error:(id *)arg2;

- (void)sendQueuedPacketsForPlayer:(id)arg1;

- (void)sendStateCallbackForPlayer:(id)arg1 state:(long long)arg2;

- (void)sendVersionData:(unsigned char)arg1;

- (void)sendVersionData:(unsigned char)arg1 toPeer:(id)arg2;

@property(retain, nonatomic) GKSession *session; // @synthesize session=_session;

- (void)session:(id)arg1 connectionWithPeerFailed:(id)arg2 withError:(id)arg3;

- (void)session:(id)arg1 didFailWithError:(id)arg2;

- (void)session:(id)arg1 initiateRelay:(id)arg2 forPeer:(id)arg3;

- (void)session:(id)arg1 networkStatisticsChanged:(id)arg2;

- (void)session:(id)arg1 peer:(id)arg2 didChangeState:(int)arg3;

- (void)session:(id)arg1 updateRelay:(id)arg2 forPeer:(id)arg3;

@property(nonatomic) unsigned char version; // @synthesize version=_version;

- (_Bool)shouldStartRelay:(id)arg1;

- (void)updateRelayConnectionForPlayer:(id)arg1;

- (void)updateRelayInfo:(id)arg1 forPlayer:(id)arg2;

- (void)updateRelayInfoFromCallback:(id)arg1 forPlayer:(id)arg2;

- (void)updateRematchID;

- (void)updateStateForPlayer:(id)arg1 state:(long long)arg2;

- (id)voiceChatWithName:(id)arg1;



@end


