/*

 *     Generated by class-dump 3.4 (64 bit).

 *

 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.

 */





#import "TSWPColumnMetrics.h"

#import "TSWPLayoutOwner.h"

#import "TSWPLayoutTarget.h"



@class NSMutableArray, TSDCanvas, TSDLayout, TSPObject<TSDHint>, TSWPPadding, TSWPStorage;



__attribute__((visibility("hidden")))

@interface TSWPStorageMeasurer : NSObject <TSWPLayoutTarget, TSWPLayoutOwner, TSWPColumnMetrics>

{

    TSWPStorage *_storage;

    NSMutableArray *_columns;

    struct CGSize _minSize;

    struct CGSize _maxSize;

    unsigned int _flags;

    struct CGPoint _anchor;

}



- (id).cxx_construct;

- (void)addAttachmentLayout:(id)arg1;

@property(readonly, nonatomic) struct CGSize adjustedInsets;

@property(readonly, nonatomic) _Bool alwaysStartsNewTarget;

@property(readonly, nonatomic) struct CGPoint anchorPoint;

@property(readonly, nonatomic) unsigned int autosizeFlags;

- (_Bool)caresAboutStorageChanges;

@property(readonly, nonatomic) unsigned long long columnCount;

- (id)columnMetricsForCharIndex:(unsigned long long)arg1 outRange:(struct _NSRange *)arg2;

@property(readonly, nonatomic) NSMutableArray *columns; // @synthesize columns=_columns;

@property(readonly, nonatomic) _Bool columnsAreLeftToRight;

- (id)currentAnchoredDrawableLayouts;

- (id)currentInlineDrawableLayouts;

@property(readonly, nonatomic) struct CGSize currentSize;

- (void)dealloc;

@property(readonly, nonatomic) id <TSWPFootnoteHeightMeasurer> footnoteHeightMeasurer;

@property(readonly, nonatomic) id <TSWPFootnoteMarkProvider> footnoteMarkProvider;

- (double)gapForColumnIndex:(unsigned long long)arg1 bodyWidth:(double)arg2;

- (id)initWithStorage:(id)arg1;

- (_Bool)isLastTarget;

- (_Bool)isLayoutOffscreen;

@property(readonly, nonatomic) _Bool layoutIsValid;

- (void)layoutManager:(id)arg1 didClearDirtyRangeWithDelta:(long long)arg2 afterCharIndex:(unsigned long long)arg3;

- (void)layoutManagerNeedsLayout:(id)arg1;

@property(readonly, nonatomic) TSWPPadding *layoutMargins;

@property(readonly, nonatomic) double maxAnchorY;

@property(readonly, nonatomic) struct CGSize maxSize;

- (struct CGSize)measuredSizeWithFlags:(unsigned int)arg1;

@property(readonly, nonatomic) struct CGSize minSize;

@property(readonly, nonatomic) int naturalAlignment;

@property(readonly, nonatomic) int naturalDirection;

@property(readonly, nonatomic) TSPObject<TSDHint> *nextTargetFirstChildHint;

@property(readonly, nonatomic) id <TSWPOffscreenColumn> nextTargetFirstColumn;

@property(readonly, nonatomic) const struct TSWPTopicNumberHints *nextTargetTopicNumbers;

- (id)pLayoutWithMinSize:(struct CGSize)arg1 maxSize:(struct CGSize)arg2 anchor:(struct CGPoint)arg3 flags:(unsigned int)arg4;

@property(readonly, nonatomic) unsigned long long pageCount;

@property(readonly, nonatomic) unsigned long long pageNumber;

@property(readonly, nonatomic) struct CGPoint position;

- (double)positionForColumnIndex:(unsigned long long)arg1 bodyWidth:(double)arg2 outWidth:(double *)arg3 outGap:(double *)arg4;

@property(readonly, nonatomic) id <TSWPOffscreenColumn> previousTargetLastColumn;

@property(readonly, nonatomic) const struct TSWPTopicNumberHints *previousTargetTopicNumbers;

- (void)setNeedsDisplayInTargetRect:(struct CGRect)arg1;

@property(readonly, nonatomic) _Bool shrinkTextToFit;

- (struct CGRect)targetRectForCanvasRect:(struct CGRect)arg1;

@property(readonly, nonatomic) _Bool textIsVertical;

- (id)textWrapper;

- (id)validatedLayoutForAnchoredDrawable:(id)arg1;

- (id)validatedLayoutForInlineDrawable:(id)arg1;

@property(readonly, nonatomic) int verticalAlignment;

@property(readonly, nonatomic) _Bool wantsLineFragments;

- (double)widthForColumnIndex:(unsigned long long)arg1 bodyWidth:(double)arg2;



// Remaining properties

@property(retain, nonatomic) NSMutableArray *anchoredDrawablesForRelayout;

@property(readonly, nonatomic) TSDCanvas *canvas;

@property(readonly, nonatomic) struct __CFLocale *hyphenationLocale;

@property(readonly, nonatomic) struct CGRect maskRect;

@property(readonly, nonatomic) TSDLayout *parentLayoutForInlineAttachments;

@property(readonly, nonatomic) _Bool shouldHyphenate;

@property(readonly, nonatomic) double textScaleFactor;



@end


