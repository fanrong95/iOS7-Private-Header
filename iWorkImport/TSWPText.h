/*

 *     Generated by class-dump 3.4 (64 bit).

 *

 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.

 */





#import "TSWPColumnMetrics.h"

#import "TSWPLayoutOwner.h"

#import "TSWPLayoutTarget.h"



@class NSMutableArray, NSObject<TSWPTextDelegate>, TSDCanvas, TSDLayout, TSPObject<TSDHint>, TSUColor, TSWPColumnStyle, TSWPListStyle, TSWPPadding, TSWPParagraphStyle, TSWPStorage;



__attribute__((visibility("hidden")))

@interface TSWPText : NSObject <TSWPLayoutTarget, TSWPLayoutOwner, TSWPColumnMetrics>

{

    TSWPParagraphStyle *_paragraphStyle;

    TSWPListStyle *_listStyle;

    TSWPColumnStyle *_columnStyle;

    TSUColor *_textColorOverride;

    TSWPStorage *_storage;

    NSMutableArray *_columns;

    struct CGSize _minSize;

    struct CGSize _maxSize;

    unsigned long long _pageNumber;

    unsigned long long _pageCount;

    int _flags;

    struct CGPoint _anchor;

    int _naturalAlignment;

    int _naturalDirection;

    NSObject<TSWPTextDelegate> *_delegate;

}



- (id).cxx_construct;

- (void)addAttachmentLayout:(id)arg1;

- (_Bool)adjustColumnOriginForAlignment;

@property(readonly, nonatomic) struct CGSize adjustedInsets;

@property(readonly, nonatomic) _Bool alwaysStartsNewTarget;

@property(readonly, nonatomic) struct CGPoint anchorPoint;

@property(readonly, nonatomic) unsigned int autosizeFlags;

- (_Bool)caresAboutStorageChanges;

@property(readonly, nonatomic) unsigned long long columnCount;

- (id)columnMetricsForCharIndex:(unsigned long long)arg1 outRange:(struct _NSRange *)arg2;

@property(readonly, nonatomic) NSMutableArray *columns; // @synthesize columns=_columns;

@property(readonly, nonatomic) _Bool columnsAreLeftToRight;

- (id)currentAnchoredDrawableLayouts;

- (id)currentInlineDrawableLayouts;

@property(readonly, nonatomic) struct CGSize currentSize;

- (void)dealloc;

@property(nonatomic) NSObject<TSWPTextDelegate> *delegate; // @synthesize delegate=_delegate;

- (void)drawColumn:(id)arg1 inContext:(struct CGContext *)arg2 isFlipped:(_Bool)arg3 viewScale:(double)arg4;

- (void)drawColumn:(id)arg1 selection:(id)arg2 inContext:(struct CGContext *)arg3 isFlipped:(_Bool)arg4 viewScale:(double)arg5;

- (void)drawText:(id)arg1 inContext:(struct CGContext *)arg2 minSize:(struct CGSize)arg3 maxSize:(struct CGSize)arg4 anchor:(struct CGPoint)arg5 flags:(int)arg6 viewScale:(double)arg7;

@property(readonly, nonatomic) id <TSWPFootnoteHeightMeasurer> footnoteHeightMeasurer;

@property(readonly, nonatomic) id <TSWPFootnoteMarkProvider> footnoteMarkProvider;

- (_Bool)forceWesternLineBreaking;

- (double)gapForColumnIndex:(unsigned long long)arg1 bodyWidth:(double)arg2;

- (id)initWithParagraphStyle:(id)arg1;

- (id)initWithParagraphStyle:(id)arg1 columnStyle:(id)arg2;

- (id)initWithParagraphStyle:(id)arg1 columnStyle:(id)arg2 alignmentForNaturalAlignment:(int)arg3 naturalDirection:(int)arg4;

- (id)initWithParagraphStyle:(id)arg1 listStyle:(id)arg2;

- (id)initWithParagraphStyle:(id)arg1 listStyle:(id)arg2 columnStyle:(id)arg3;

- (id)initWithParagraphStyle:(id)arg1 listStyle:(id)arg2 columnStyle:(id)arg3 alignmentForNaturalAlignment:(int)arg4 naturalDirection:(int)arg5;

- (_Bool)isLastTarget;

- (_Bool)isLayoutOffscreen;

@property(readonly, nonatomic) _Bool layoutIsValid;

- (void)layoutManager:(id)arg1 didClearDirtyRangeWithDelta:(long long)arg2 afterCharIndex:(unsigned long long)arg3;

- (void)layoutManagerNeedsLayout:(id)arg1;

@property(readonly, nonatomic) TSWPPadding *layoutMargins;

- (id)layoutText:(id)arg1 kind:(int)arg2 minSize:(struct CGSize)arg3 maxSize:(struct CGSize)arg4 anchor:(struct CGPoint)arg5 flags:(int)arg6;

- (id)layoutText:(id)arg1 minSize:(struct CGSize)arg2 maxSize:(struct CGSize)arg3 anchor:(struct CGPoint)arg4 flags:(int)arg5;

- (id)layoutTextStorage:(id)arg1 minSize:(struct CGSize)arg2 maxSize:(struct CGSize)arg3 anchor:(struct CGPoint)arg4 flags:(int)arg5;

- (id)layoutTextStorage:(id)arg1 minSize:(struct CGSize)arg2 maxSize:(struct CGSize)arg3 anchor:(struct CGPoint)arg4 pageNumber:(unsigned long long)arg5 pageCount:(unsigned long long)arg6 flags:(int)arg7;

@property(readonly, nonatomic) double maxAnchorY;

@property(readonly, nonatomic) struct CGSize maxSize;

- (struct CGSize)measureText:(id)arg1;

@property(readonly, nonatomic) struct CGSize minSize;

@property(readonly, nonatomic) int naturalAlignment; // @synthesize naturalAlignment=_naturalAlignment;

@property(readonly, nonatomic) int naturalDirection; // @synthesize naturalDirection=_naturalDirection;

@property(readonly, nonatomic) TSPObject<TSDHint> *nextTargetFirstChildHint;

@property(readonly, nonatomic) id <TSWPOffscreenColumn> nextTargetFirstColumn;

@property(readonly, nonatomic) const struct TSWPTopicNumberHints *nextTargetTopicNumbers;

@property(readonly, nonatomic) unsigned long long pageCount;

@property(readonly, nonatomic) unsigned long long pageNumber;

@property(readonly, nonatomic) TSWPParagraphStyle *paragraphStyle; // @synthesize paragraphStyle=_paragraphStyle;

@property(readonly, nonatomic) struct CGPoint position;

- (double)positionForColumnIndex:(unsigned long long)arg1 bodyWidth:(double)arg2 outWidth:(double *)arg3 outGap:(double *)arg4;

@property(readonly, nonatomic) id <TSWPOffscreenColumn> previousTargetLastColumn;

@property(readonly, nonatomic) const struct TSWPTopicNumberHints *previousTargetTopicNumbers;

- (void)setNeedsDisplayInTargetRect:(struct CGRect)arg1;

@property(retain, nonatomic) TSUColor *textColorOverride; // @synthesize textColorOverride=_textColorOverride;

@property(readonly, nonatomic) _Bool shrinkTextToFit;

- (struct CGRect)targetRectForCanvasRect:(struct CGRect)arg1;

@property(readonly, nonatomic) _Bool textIsVertical;

- (id)textWrapper;

- (id)validatedLayoutForAnchoredDrawable:(id)arg1;

- (id)validatedLayoutForInlineDrawable:(id)arg1;

@property(readonly, nonatomic) int verticalAlignment;

@property(readonly, nonatomic) _Bool wantsLineFragments;

- (double)widthForColumnIndex:(unsigned long long)arg1 bodyWidth:(double)arg2;



// Remaining properties

@property(retain, nonatomic) NSMutableArray *anchoredDrawablesForRelayout;

@property(readonly, nonatomic) TSDCanvas *canvas;

@property(readonly, nonatomic) struct __CFLocale *hyphenationLocale;

@property(readonly, nonatomic) struct CGRect maskRect;

@property(readonly, nonatomic) TSDLayout *parentLayoutForInlineAttachments;

@property(readonly, nonatomic) _Bool shouldHyphenate;

@property(readonly, nonatomic) double textScaleFactor;



@end


