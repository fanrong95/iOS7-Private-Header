/*

 *     Generated by class-dump 3.4 (64 bit).

 *

 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.

 */



#import "TSDFill.h"


#import "NSCopying.h"

#import "NSMutableCopying.h"

#import "TSDMixing.h"

#import "TSSPreset.h"

#import "TSSPresetSource.h"



@class NSObject<OS_dispatch_queue>, NSString, TSPData, TSUColor, TSUFlushableCachedImage;



__attribute__((visibility("hidden")))

@interface TSDImageFill : TSDFill <TSDMixing, TSSPreset, TSSPresetSource, NSCopying, NSMutableCopying>

{

    TSPData *mImageData;

    TSPData *mOriginalImageData;

    int mTechnique;

    TSUColor *mTintColor;

    TSUFlushableCachedImage *mStandardSizeTintedImage;

    TSUFlushableCachedImage *mHalfSizeTintedImage;

    TSUFlushableCachedImage *mQuarterSizeTintedImage;

    TSUColor *mReferenceColor;

    struct CGSize mFillSize;

    _Bool mHasIndicatedInterestInProvider;

    NSObject<OS_dispatch_queue> *mTempRenderLock;

    struct CGImage *mTempRenderCopy;

    struct CGImage *mSourceOfTempRenderCopy;

    long long mTempRenderCount;

}



+ (void)bootstrapPresetsOfKind:(id)arg1 inTheme:(id)arg2 alternate:(int)arg3;

+ (id)instanceWithArchive:(const struct FillArchive *)arg1 unarchiver:(id)arg2;

+ (id)presetKinds;

- (void)addBitmapsToRenderingQualityInfo:(id)arg1 forShapeRep:(id)arg2 inContext:(struct CGContext *)arg3;

- (void)applyToCALayer:(id)arg1 withScale:(double)arg2;

- (_Bool)canApplyToCALayer;

- (_Bool)canApplyToCALayerByAddingSublayers;

- (id)copyWithZone:(struct _NSZone *)arg1;

- (void)dealloc;

- (void)drawSwatchInRect:(struct CGRect)arg1 inContext:(struct CGContext *)arg2;

- (_Bool)drawsInOneStep;

@property(readonly, nonatomic) struct CGSize fillSize; // @synthesize fillSize=mFillSize;

- (int)fillType;

- (unsigned long long)hash;

@property(readonly, nonatomic) TSPData *imageData; // @synthesize imageData=mImageData;

- (id)imageDataAtFillSize;

- (id)initWithArchive:(const struct FillArchive *)arg1 unarchiver:(id)arg2;

- (id)initWithImageData:(id)arg1 technique:(int)arg2 tintColor:(id)arg3 size:(struct CGSize)arg4 originalImageData:(id)arg5;

- (_Bool)isEqual:(id)arg1;

- (_Bool)isOpaque;

- (SEL)mapThemeAssetSelector;

- (id)mixedObjectWithFraction:(double)arg1 ofObject:(id)arg2;

- (long long)mixingTypeWithObject:(id)arg1;

- (id)mutableCopyWithZone:(struct _NSZone *)arg1;

@property(readonly, nonatomic) TSPData *originalImageData; // @synthesize originalImageData=mOriginalImageData;

- (id)p_cachedImageForSize:(struct CGSize)arg1 inContext:(struct CGContext *)arg2 orLayer:(id)arg3;

- (void)p_drawBitmapImage:(struct CGImage *)arg1 withOrientation:(long long)arg2 inContext:(struct CGContext *)arg3 bounds:(struct CGRect)arg4;

- (void)p_drawPDFWithProvider:(id)arg1 inContext:(struct CGContext *)arg2 bounds:(struct CGRect)arg3;

- (struct CGRect)p_drawnRectForImageSize:(struct CGSize)arg1 destRect:(struct CGRect)arg2 inContext:(struct CGContext *)arg3;

- (id)p_halfSizeCachedImage;

- (struct CGImage *)p_newHalfSizeImage;

- (struct CGImage *)p_newQuarterSizeImage;

- (struct CGImage *)p_newStandardSizeImage;

- (struct CGImage *)p_newTintedImageWithScale:(double)arg1;

- (void)p_paintPath:(struct CGPath *)arg1 inContext:(struct CGContext *)arg2;

- (id)p_quarterSizeCachedImage;

- (void)p_setFillSizeForApplicationData;

- (_Bool)p_shouldApplyTintedImage;

- (_Bool)p_shouldPersistFillSizeForData:(id)arg1;

- (struct CGSize)p_sizeOfFillImageForDestRect:(struct CGRect)arg1 inContext:(struct CGContext *)arg2;

- (id)p_standardSizeCachedImage;

- (id)p_validatedImageProvider;

- (void)paintPath:(struct CGPath *)arg1 inContext:(struct CGContext *)arg2;

- (void)paintPath:(struct CGPath *)arg1 naturalBounds:(struct CGRect)arg2 inContext:(struct CGContext *)arg3 isPDF:(_Bool)arg4;

@property(readonly, nonatomic) NSString *presetKind;

- (id)referenceColor;

- (struct CGSize)renderedImageSizeForObjectSize:(struct CGSize)arg1;

- (void)saveToArchive:(struct FillArchive *)arg1 archiver:(id)arg2;

@property(readonly, nonatomic) double scale;

@property(nonatomic) int technique; // @synthesize technique=mTechnique;

- (_Bool)shouldBeReappliedToCALayer:(id)arg1;

@property(readonly, nonatomic) TSUColor *tintColor; // @synthesize tintColor=mTintColor;



@end


