/*

 *     Generated by class-dump 3.4 (64 bit).

 *

 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.

 */





#import "TSDPartitioner.h"



@class NSMutableDictionary, TSDInfoGeometry, TSTLayout, TSTTableInfo, TSUPointerKeyDictionary;



__attribute__((visibility("hidden")))

@interface TSTTablePartitioner : NSObject <TSDPartitioner>

{

    TSTTableInfo *mTableInfo;

    TSDInfoGeometry *mInfoGeometry;

    double mFirstPartitionWidth;

    struct CGSize mScaleToFit;

    TSTLayout *mScaledLayout;

    TSUPointerKeyDictionary *mHintMatricesByCanvas;

    NSMutableDictionary *mPartitioningPassCache;

}



- (void)dealloc;

- (_Bool)didHint:(id)arg1 syncWithNextHint:(id)arg2 horizontally:(_Bool)arg3 delta:(int)arg4;

- (id)hintCacheKeyForHint:(id)arg1;

- (id)hintCacheKeyForPartitioningPass:(id)arg1 andHintID:(CDStruct_0441cfb5)arg2;

- (id)hintForLayout:(id)arg1;

@property(copy, nonatomic) TSDInfoGeometry *infoGeometry; // @synthesize infoGeometry=mInfoGeometry;

- (id)initWithInfo:(id)arg1;

@property(readonly, nonatomic) double inlineTableWidth; // @synthesize inlineTableWidth=mFirstPartitionWidth;

- (id)layoutForHint:(id)arg1 parentLayout:(id)arg2;

- (CDStruct_5f1f7aa9)measureCellRangeForNextPartitionOfSize:(struct CGSize)arg1 previousHint:(id)arg2 horizontally:(_Bool)arg3;

- (id)nextHintForSize:(struct CGSize)arg1 parentLayout:(id)arg2 previousHint:(id)arg3 horizontally:(_Bool)arg4 outFinished:(out _Bool *)arg5;

- (id)nextLayoutForSize:(struct CGSize)arg1 parentLayout:(id)arg2 previousHint:(id)arg3 horizontally:(_Bool)arg4 outFinished:(out _Bool *)arg5;

- (_Bool)p_didFinishPartitioningHint:(id)arg1 horizontally:(_Bool)arg2;

- (void)p_flushCacheAfterPartitioningFinished:(id)arg1 lastHint:(id)arg2 horizontally:(_Bool)arg3;

- (id)partitioningPassForFirstPartitionSize:(struct CGSize)arg1;

- (id)partitioningPassForHint:(id)arg1 withPreviousHint:(id)arg2;

@property(readonly, nonatomic) _Bool scaleIsValid;

@property(nonatomic) struct CGSize scaleToFit; // @synthesize scaleToFit=mScaleToFit;

@property(readonly, nonatomic) TSTLayout *scaledLayout;

- (_Bool)shouldReuseLayout:(id)arg1 forSize:(struct CGSize)arg2 parentLayout:(id)arg3 hint:(id)arg4;

@property(readonly, nonatomic) TSTTableInfo *tableInfo; // @synthesize tableInfo=mTableInfo;

- (void)validateScaledLayout;



@end


