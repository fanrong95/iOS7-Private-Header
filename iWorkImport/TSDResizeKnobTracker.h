/*

 *     Generated by class-dump 3.4 (64 bit).

 *

 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.

 */



#import "TSDKnobTracker.h"


#import "TSDDecorator.h"

#import "TSDRepTracker.h"



@class CALayer, TSDHUDViewController, TSDLayout, TSDRep, TSUPointerKeyDictionary;



__attribute__((visibility("hidden")))

@interface TSDResizeKnobTracker : TSDKnobTracker <TSDDecorator, TSDRepTracker>

{

    _Bool mSnapEnabled;

    struct CGSize mMinimumSize;

    struct CGSize mMaximumSize;

    _Bool mCanMoveKnobAcrossOpposite;

    _Bool mShouldResizeFromCenter;

    TSDRep *mRepToMatch;

    struct CGPoint mSecondaryHUDPoint;

    struct CGAffineTransform mOriginalTransformInRoot;

    TSDLayout *mResizingLayout;

    TSUPointerKeyDictionary *mResizingLayoutsByRep;

    struct CGRect mBaseBounds;

    struct CGRect mLastNewBounds;

    _Bool mSnappedToAspectRatio;

    _Bool mBeganAlignmentOperation;

    CALayer *mGuideLayer;

    TSDHUDViewController *mSecondHUDController;

    id <TSDRepTrackerDelegate> mDelegate;

    _Bool mNeedsHUD;

}



- (id)actionForLayer:(id)arg1 forKey:(id)arg2;

- (_Bool)allowHUDToDisplay;

- (void)animationDidStop:(id)arg1 finished:(_Bool)arg2;

- (void)applyNewBoundsToPrimaryRep;

- (void)applyNewBoundsToRep:(id)arg1;

- (void)beginMovingKnob;

- (_Bool)canCenterResize;

@property(nonatomic) _Bool canMoveKnobAcrossOpposite; // @synthesize canMoveKnobAcrossOpposite=mCanMoveKnobAcrossOpposite;

- (void)changeDynamicLayoutsForReps:(id)arg1;

- (void)constrainAndSnapByMovingKnobTo:(struct CGPoint)arg1 snappingToGuides:(_Bool)arg2;

- (void)constrainBetweenMaxAndMinSize;

- (struct CGPoint)convertKnobPositionToUnscaledCanvas:(struct CGPoint)arg1;

- (struct CGRect)currentBoundsForStandardKnobs;

- (id)currentGeometryForLayout:(id)arg1;

- (struct CGSize)currentSizeForLayout:(id)arg1;

- (void)dealloc;

- (id)decoratorOverlayLayers;

- (void)endMovingKnob;

- (_Bool)hasHorizontalFlip;

- (_Bool)hasVerticalFlip;

- (id)hudLabelText;

- (struct CGRect)i_baseBounds;

- (struct CGRect)i_lastNewBounds;

- (id)initWithRep:(id)arg1 knob:(id)arg2;

- (_Bool)isMinimumSizeFixed;

@property(nonatomic) struct CGSize maximumSize; // @synthesize maximumSize=mMaximumSize;

@property(nonatomic) struct CGSize minimumSize; // @synthesize minimumSize=mMinimumSize;

- (void)moveKnobToCanvasPosition:(struct CGPoint)arg1;

- (void)moveKnobToRepPosition:(struct CGPoint)arg1;

- (void)p_cancelDelayedHUDAndGuides;

- (void)p_hideGuideLayer;

- (void)p_hideHUD;

- (_Bool)p_isMatchingSize;

- (_Bool)p_isPreservingAspectRatio;

- (_Bool)p_isResizingFromCenter;

- (void)p_makeSiblingRepsPerformBlock:(id)arg1;

- (struct CGAffineTransform)p_repTransformInRootForTransforming;

- (_Bool)p_shouldApplyResizeToSiblingsOfRep;

- (void)p_showHUDAndGuides;

- (struct CGRect)p_simpleResizedRectByMovingKnobTo:(struct CGPoint)arg1;

- (void)p_updateGuideLayer;

- (void)p_updateHUD;

- (void)p_validateLayout;

@property(retain, nonatomic) TSDRep *repToMatch; // @synthesize repToMatch=mRepToMatch;

- (struct CGAffineTransform)resizeTransform;

- (id)resizingLayoutForRep:(id)arg1;

@property(nonatomic) struct CGPoint secondaryHUDPoint; // @synthesize secondaryHUDPoint=mSecondaryHUDPoint;

@property(nonatomic) _Bool shouldResizeFromCenter; // @synthesize shouldResizeFromCenter=mShouldResizeFromCenter;

@property(nonatomic) _Bool snapEnabled; // @synthesize snapEnabled=mSnapEnabled;

- (_Bool)shouldHideOtherKnobs;

- (_Bool)shouldHideSelectionHighlight;

- (struct CGAffineTransform)transformForLayout:(id)arg1;

- (struct CGAffineTransform)transformInRootForStandardKnobs;



// Remaining properties

@property(nonatomic) _Bool isInspectorDrivenTracking;



@end


