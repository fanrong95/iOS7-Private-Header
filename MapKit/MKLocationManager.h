/*

 *     Generated by class-dump 3.4 (64 bit).

 *

 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.

 */





#import "MKLocationProviderDelegate.h"

#import "_MKWiFiObserverDelegate.h"



@class CLHeading, CLLocation, GEOLocation, GEOLocationShifter, NSBundle, NSHashTable, NSString, NSTimer, _MKWiFiObserver;



@interface MKLocationManager : NSObject <_MKWiFiObserverDelegate, MKLocationProviderDelegate>

{

    id <MKLocationProvider> _locationProvider;

    NSHashTable *_locationObservers;

    NSHashTable *_locationListeners;

    NSHashTable *_regionMonitors;

    NSHashTable *_headingObservers;

    CLLocation *_lastLocation;

    double _lastLocationUpdateTime;

    _Bool _isLastLocationStale;

    _Bool _lastLocationPushed;

    _Bool _trackingLocation;

    _Bool _trackingHeading;

    id <MKLocationRecorder> _locationRecorder;

    double _applicationResumeTime;

    double _applicationSuspendTime;

    double _headingUpdateTime;

    double _locationAccuracyUpdateTime;

    _Bool _allowUpdateCoalescing;

    NSTimer *_coalesceTimer;

    double _lastLocationReportTime;

    GEOLocationShifter *_locationShifter;

    CLHeading *_throttledHeading;

    CLHeading *_heading;

    id _networkActivity;

    _Bool _enabled;

    _Bool _useCourseForHeading;

    _Bool _logStartStopLocationUpdates;

    int _consecutiveOutOfCourseCount;

    double _navCourse;

    id _locationCorrector;

    _Bool _continuedAfterBecomingInactive;

    _Bool _suspended;

    _MKWiFiObserver *_wifiObserver;

    _Bool _continuesWhileInactive;

}



+ (void)setCanMonitorWiFiStatus:(_Bool)arg1;

+ (id)sharedLocationManager;

- (void)_airplaneModeChanged;

- (_Bool)_isTimeToResetOnResume;

- (void)_locationProvider:(id)arg1 didUpdateLocation:(id)arg2 lastKnownNavCourse:(double)arg3;

- (void)_refreshAirplaneMode;

- (void)_reportHeadingFailureWithError:(id)arg1;

- (void)_reportHeadingSuccess;

- (void)_reportLocationFailureWithError:(id)arg1;

- (void)_reportLocationReset;

- (void)_reportLocationStatus:(SEL)arg1;

- (void)_reportLocationSuccess;

- (void)_setTrackingHeading:(_Bool)arg1;

- (void)_setTrackingLocation:(_Bool)arg1;

- (void)_startCoalescingUpdates:(int)arg1;

- (void)_stopCoalescingUpdates;

- (void)_suspend;

- (void)_syncLocationProviderWithTracking;

- (void)_useCoreLocationProvider;

@property(nonatomic) long long activityType;

@property(nonatomic) _Bool allowUpdateCoalescing; // @synthesize allowUpdateCoalescing=_allowUpdateCoalescing;

- (void)applicationDidBecomeActive:(id)arg1;

- (void)applicationWillResignActive:(id)arg1;

@property(nonatomic) _Bool continuesWhileInactive; // @synthesize continuesWhileInactive=_continuesWhileInactive;

@property(readonly, nonatomic) GEOLocation *courseCorrectedLocation;

@property(readonly, nonatomic) GEOLocation *currentLocation;

- (void)dampenGPSLocationAccuracy:(id *)arg1 oldLocationSource:(int)arg2;

- (void)dealloc;

@property(nonatomic) double desiredAccuracy;

- (void)dismissHeadingCalibrationDisplay;

@property(nonatomic) double distanceFilter;

@property(retain, nonatomic) NSBundle *effectiveBundle;

@property(copy, nonatomic) NSString *effectiveBundleIdentifier;

@property(readonly, nonatomic) double expectedGpsUpdateInterval;

@property(readonly, nonatomic) GEOLocation *gridSnappedCurrentLocation;

@property(readonly, nonatomic) _Bool hasLocation;

@property(readonly, nonatomic) CLHeading *heading; // @synthesize heading=_heading;

@property(nonatomic) long long headingOrientation;

@property(readonly, nonatomic) double headingUpdateTimeInterval;

- (id)init;

@property(readonly, nonatomic) _Bool isAirplaneModeBlockingLocation;

@property(nonatomic, getter=isEnabled) _Bool enabled; // @synthesize enabled=_enabled;

@property(readonly, nonatomic) _Bool isHeadingServicesAvailable;

@property(readonly, nonatomic) _Bool isLastLocationStale; // @synthesize isLastLocationStale=_isLastLocationStale;

@property(readonly, nonatomic) _Bool isLocationServicesApproved;

@property(readonly, nonatomic, getter=isLocationServicesAuthorizationNeeded) _Bool locationServicesAuthorizationNeeded;

@property(readonly, nonatomic) _Bool isLocationServicesAvailable;

@property(readonly, nonatomic) _Bool isLocationServicesDenied;

@property(readonly, nonatomic) _Bool isLocationServicesEnabled;

@property(readonly, nonatomic) _Bool isLocationServicesPossiblyAvailable;

- (_Bool)isLocationServicesPossiblyAvailable:(id *)arg1;

@property(nonatomic, getter=isLocationServicesPreferencesDialogEnabled) _Bool locationServicesPreferencesDialogEnabled;

@property(readonly, nonatomic) _Bool isLocationServicesRestricted;

- (_Bool)isMonitoringRegionsAvailable;

@property(readonly, nonatomic) _Bool isWiFiEnabled;

@property(readonly, nonatomic) CLLocation *lastLocation;

@property(readonly, nonatomic) int lastLocationSource;

- (void)listenForLocationUpdates:(id)arg1;

@property(copy, nonatomic) id locationCorrector; // @synthesize locationCorrector=_locationCorrector;

@property(retain, nonatomic) id <MKLocationProvider> locationProvider;

- (void)locationProvider:(id)arg1 didEnterRegion:(id)arg2;

- (void)locationProvider:(id)arg1 didExitRegion:(id)arg2;

- (void)locationProvider:(id)arg1 didReceiveError:(id)arg2;

- (void)locationProvider:(id)arg1 didReceiveError:(id)arg2 monitoringRegion:(id)arg3;

- (void)locationProvider:(id)arg1 didUpdateHeading:(id)arg2;

- (void)locationProvider:(id)arg1 didUpdateLocation:(id)arg2;

- (void)locationProvider:(id)arg1 didUpdateLocation:(id)arg2 lastKnownNavCourse:(double)arg3;

- (void)locationProviderDidChangeAuthorizationStatus:(id)arg1;

- (void)locationProviderDidPauseLocationUpdates:(id)arg1;

- (void)locationProviderDidResumeLocationUpdates:(id)arg1;

- (_Bool)locationProviderShouldPauseLocationUpdates:(id)arg1;

@property(retain, nonatomic) id <MKLocationRecorder> locationRecorder; // @synthesize locationRecorder=_locationRecorder;

@property(readonly, nonatomic) _Bool locationShiftEnabled;

@property(nonatomic) _Bool logStartStopLocationUpdates; // @synthesize logStartStopLocationUpdates=_logStartStopLocationUpdates;

@property(readonly, nonatomic) double navigationCourse; // @synthesize navigationCourse=_navCourse;

@property(copy, nonatomic) id networkActivity; // @synthesize networkActivity=_networkActivity;

- (void)pushLocation:(id)arg1;

- (void)reportCoalescedUpdated;

- (void)reset;

- (void)resetAfterResumeIfNecessary;

- (void)setCoalesceTimer:(id)arg1;

- (void)setHeading:(id)arg1;

- (void)setLastLocation:(id)arg1;

@property(retain, nonatomic) CLHeading *throttledHeading; // @synthesize throttledHeading=_throttledHeading;

@property(nonatomic) _Bool useCourseForHeading; // @synthesize useCourseForHeading=_useCourseForHeading;

- (_Bool)shouldCoalesceUpdates;

- (_Bool)shouldStartCoalescingLocation:(id)arg1;

- (_Bool)shouldStopCoalescingLocation:(id)arg1;

- (id)singleLocationUpdateWithHandler:(id)arg1;

- (void)startHeadingUpdateWithObserver:(id)arg1;

- (void)startLocationUpdateWithObserver:(id)arg1;

- (void)startMonitoringRegion:(id)arg1 observer:(id)arg2;

- (void)stopHeadingUpdateWithObserver:(id)arg1;

- (void)stopLocationUpdateWithObserver:(id)arg1;

- (void)stopMonitoringRegion:(id)arg1 observer:(id)arg2;

@property(readonly, nonatomic, getter=wasLastLocationPushed) _Bool lastLocationPushed; // @synthesize lastLocationPushed=_lastLocationPushed;

- (void)wiFiObserverDidChangeEnabled:(id)arg1;



@end


