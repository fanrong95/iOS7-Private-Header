/*

 *     Generated by class-dump 3.4 (64 bit).

 *

 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.

 */





@class MCPeerID, NSArray, NSMutableDictionary, NSObject<OS_dispatch_queue>;



@interface MCSession : NSObject

{

    unsigned int _gckPID;

    id <MCSessionDelegate> _delegate;

    MCPeerID *_myPeerID;

    NSArray *_securityIdentity;

    long long _encryptionPreference;

    struct OpaqueGCKSession *_gckSession;

    struct OpaqueAGPSession *_agpSession;

    NSMutableDictionary *_peerIDMap;

    NSObject<OS_dispatch_queue> *_syncQueue;

    id <MCSessionPrivateDelegate> _privateDelegate;

    NSMutableDictionary *_peerStates;

    NSMutableDictionary *_connectionPendingPeerEvents;

    NSObject<OS_dispatch_queue> *_callbackQueue;

}



+ (id)stringForMCSessionSendDataMode:(long long)arg1;

+ (id)stringForSessionState:(long long)arg1;

@property(nonatomic) struct OpaqueAGPSession *agpSession; // @synthesize agpSession=_agpSession;

@property(retain, nonatomic) NSObject<OS_dispatch_queue> *callbackQueue; // @synthesize callbackQueue=_callbackQueue;

- (void)closeIncomingStream:(id)arg1 forPeer:(id)arg2 state:(id)arg3 error:(id)arg4 removeObserver:(_Bool)arg5;

- (void)closeOutgoingStream:(id)arg1 forPeer:(id)arg2 state:(id)arg3 error:(id)arg4 removeObserver:(_Bool)arg5;

- (void)closeStreamsForPeer:(id)arg1 state:(id)arg2;

- (void)connectPeer:(id)arg1 withNearbyConnectionData:(id)arg2;

@property(readonly, nonatomic) NSArray *connectedPeers;

@property(retain, nonatomic) NSMutableDictionary *connectionPendingPeerEvents; // @synthesize connectionPendingPeerEvents=_connectionPendingPeerEvents;

- (void)dealloc;

@property(nonatomic) id <MCSessionDelegate> delegate; // @synthesize delegate=_delegate;

- (id)description;

- (void)disconnect;

@property(readonly, nonatomic) long long encryptionPreference; // @synthesize encryptionPreference=_encryptionPreference;

@property(nonatomic) unsigned int gckPID; // @synthesize gckPID=_gckPID;

@property(nonatomic) struct OpaqueGCKSession *gckSession; // @synthesize gckSession=_gckSession;

- (id)initWithPeer:(id)arg1;

- (id)initWithPeer:(id)arg1 securityIdentity:(id)arg2 encryptionPreference:(long long)arg3;

- (_Bool)isEncryptionPreferenceCompatible:(long long)arg1;

@property(readonly, nonatomic) MCPeerID *myPeerID; // @synthesize myPeerID=_myPeerID;

- (void)nearbyConnectionDataForPeer:(id)arg1 withCompletionHandler:(id)arg2;

- (void)peerDidDeclineInvitation:(id)arg1;

@property(retain, nonatomic) NSMutableDictionary *peerIDMap; // @synthesize peerIDMap=_peerIDMap;

@property(retain, nonatomic) NSMutableDictionary *peerStates; // @synthesize peerStates=_peerStates;

@property(nonatomic) id <MCSessionPrivateDelegate> privateDelegate; // @synthesize privateDelegate=_privateDelegate;

@property(readonly, nonatomic) NSArray *securityIdentity; // @synthesize securityIdentity=_securityIdentity;

- (_Bool)sendData:(id)arg1 toPeers:(id)arg2 withMode:(long long)arg3 error:(id *)arg4;

- (id)sendResourceAtURL:(id)arg1 withName:(id)arg2 toPeer:(id)arg3 withCompletionHandler:(id)arg4;

@property(retain, nonatomic) NSObject<OS_dispatch_queue> *syncQueue; // @synthesize syncQueue=_syncQueue;

- (void)startConnectionWithIndirectPID:(unsigned int)arg1;

- (id)startStreamWithName:(id)arg1 toPeer:(id)arg2 error:(id *)arg3;

- (id)stringForEncryptionPreference:(long long)arg1;

- (void)syncConnectPeer:(id)arg1 withConnectionData:(id)arg2;

- (void)syncGetConnectionDataForPID:(unsigned int)arg1 completionHandlerCopy:(id)arg2;

- (void)syncHandleNetworkEvent:(CDStruct_68f9d01f *)arg1 pid:(unsigned int)arg2 freeEventWhenDone:(_Bool *)arg3;

- (void)syncHandleXDataDataPacket:(char *)arg1 packetSize:(int)arg2 forPeer:(id)arg3 state:(id)arg4;

- (void)syncSendData:(id)arg1 toPeers:(id)arg2 withDataMode:(long long)arg3;

- (void)syncSendXDataConnectionBlobPushToPID:(unsigned int)arg1 connectionBlob:(id)arg2;

- (void)syncSendXDataPeerIDPushToPID:(unsigned int)arg1;

- (void)syncSendXDataStreamCloseFromReceiverToPID:(unsigned int)arg1 streamID:(unsigned int)arg2 closeReason:(unsigned short)arg3;

- (void)syncSendXDataStreamCloseFromSenderToPID:(unsigned int)arg1 streamID:(unsigned int)arg2 closeReason:(unsigned short)arg3;

- (void)syncSendXDataStreamOpenResponseToPID:(unsigned int)arg1 withRequestID:(unsigned int)arg2 streamID:(unsigned int)arg3;

- (void)syncStartStreamWithName:(id)arg1 toPeer:(id)arg2 mcFD:(int)arg3 isResource:(_Bool)arg4;



@end


