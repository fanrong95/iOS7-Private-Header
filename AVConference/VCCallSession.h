/*

 *     Generated by class-dump 3.4 (64 bit).

 *

 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.

 */





#import "LoopbackSocketTunnelDelegate.h"



@class AVAudioPayload, AVAudioTier, AVAudioTierPicker, GKInterfaceListener, GKRingBuffer, LoopbackSocketTunnel, NSArray, NSCondition, NSData, NSDictionary, NSMutableArray, NSObject<OS_dispatch_queue>, NSObject<OS_dispatch_source>, NSObject<VCCallSessionDelegate>, NSObject<VideoConferenceChannelQualityDelegate>, NSObject<VideoConferenceRealTimeChannel>, NSString, TCPTunnelClient, TimingCollection, VCBitrateArbiter, VCCallInfo, VCCallLinkCongestionDetector, VCCapabilities, VCJitterBuffer, VCSessionMessaging, VCTransport, VCWCMClient, VideoAttributes;



__attribute__((visibility("hidden")))

@interface VCCallSession : NSObject <LoopbackSocketTunnelDelegate>

{

    NSObject<VCCallSessionDelegate> *delegate;

    VCCallInfo *localCallInfo;

    VCCallInfo *remoteCallInfo;

    struct tagHANDLE *rtpHandle;

    struct tagHANDLE *rtpVideo;

    int numEncodedBytes;

    int numBufferBytesAvailable;

    _Bool didUseICE;

    struct tagCONNRESULT connectionResult;

    struct tagCONNRESULT prevConnectionResult;

    struct tagCONNRESULT origConnectionResult;

    long long state;

    NSMutableArray *audioPayloads;

    AVAudioPayload *currentAudioPayload;

    AVAudioTierPicker *audioTierPicker_AppleCalling;

    AVAudioTierPicker *audioTierPicker_FaceTime;

    AVAudioTier *currentAudioTier;

    AVAudioTier *requestedAudioTier;

    long long videoPayload;

    long long sampleRate;

    long long samplesPerFrame;

    long long blockSize;

    float blockSeconds;

    struct tagHANDLE *hAUIO;

    struct tagHANDLE *hSIP;

    double lastReceivedAudio;

    _Bool launchedShutdownThread;

    _Bool isAudioRunning;

    _Bool isWaitingForICEResult;

    _Bool didSend200OK;

    float remoteParticipantVolume;

    NSObject<VideoConferenceRealTimeChannel> *rtChannel;

    LoopbackSocketTunnel *tunnel;

    struct _opaque_pthread_mutex_t mutex;

    _Bool useLoopback;

    _Bool receivedSIPInvite;

    char szRemoteRTPIP[48];

    int iRemoteRTPPort;

    int iRemoteRTCPPort;

    VCCapabilities *caps;

    struct tagHANDLE *hMediaQueue;

    struct tagHANDLE *hAFRC;

    GKRingBuffer *ringBuf;

    unsigned int lastReceived;

    char *bundleBuffer;

    int bundledPackets;

    int packetsPerBundle;

    unsigned int bundleTimestamp;

    int bundlePayload;

    int canUseSpecialAACBundle;

    int preferredAudioCodec;

    int audioTxBitrate;

    int audioHeaderSize;

    unsigned int afrcBitrate;

    double audioInterval;

    _Bool useSBR;

    _Bool useControlByte;

    _Bool useUEP;

    NSDictionary *_allPayloadsLocalFeaturesString;

    char _matchedFeaturesString[1600];

    unsigned char inputMeter;

    _Bool audioIsPaused;

    struct _opaque_pthread_mutex_t pauseLock;

    NSObject<OS_dispatch_queue> *videoQueue;

    NSArray *mutedPeers;

    int bandwidthUpstream;

    int bandwidthDownstream;

    _Bool allowAudioRecording;

    int aacBlockSize;

    _Bool fInitialBandwidthDetection;

    int carrierBitrateCap;

    struct AudioStreamBasicDescription vpioFormat;

    _Bool allowAudioSwitching;

    _Bool shouldUpdateLastReceivedPacketTimestamp;

    double lastReceivedPacketTimestamp;

    _Bool isRemoteMediaStalled;

    int packetsSinceStall;

    _Bool isAttemptingRelay;

    long long relayState;

    _Bool allowsRelay;

    _Bool requiresWifi;

    _Bool useCompressedConnectionData;

    int natType;

    unsigned int lastSentAudioSampleTime;

    NSObject<OS_dispatch_source> *pausedAudioHeartBeat;

    TCPTunnelClient *_tcpTunnelClient;

    TimingCollection *perfTimers;

    double packetLossRate;

    double timeLastCheckedNetworkConditions;

    double timeLastKnowGoodNetworkPLR;

    double timeLastKnowGoodNetworkRTT;

    double networkConditionsTimeoutInSeconds;

    NSString *peerCN;

    NSString *sessionID;

    unsigned int roundTripTime;

    float packetLateAndMissingRatio;

    float callerPreEmptiveTimeoutInSecs;

    int sampleLogCount;

    double timeSinceLastReportedNoPackets;

    double noRemotePacketsTimeout;

    _Bool didAttemptSIPInvite;

    NSObject<VideoConferenceChannelQualityDelegate> *qualityDelegate;

    struct _opaque_pthread_mutex_t qualityDelegateLock;

    NSObject<OS_dispatch_queue> *qualityQueue;

    NSObject<OS_dispatch_queue> *managerQueue;

    _Bool shouldTimeoutPackets;

    struct _opaque_pthread_mutex_t srtpLock;

    _Bool didPrepareSRTP;

    _Bool useAFRC;

    _Bool isRTCPFBEnabled;

    VCCallLinkCongestionDetector *congestionDetector;

    _Bool shouldSendAudio;

    _Bool isRemoteDevice4x;

    _Bool isGKVoiceChat;

    void *packetThread;

    int signalStrength;

    int signalRaw;

    int signalGrade;

    _Bool bBWEstOperatingModeInitialized;

    _Bool bBWEstNewBWEstModeEnabled;

    _Bool bBWEstFakeLargeFrameModeEnabled;

    _Bool bBWEstActiveProbingSenderLog;

    struct CGSize remoteScreenPortraitAspectRatio;

    struct CGSize remoteScreenLandscapeAspectRatio;

    struct CGSize remoteExpectedPortraitAspectRatio;

    struct CGSize remoteExpectedLandscapeAspectRatio;

    _Bool isStarted;

    NSData *srtpKeyBytes;

    _Bool isInitiator;

    _Bool sentClientSuccessfulDidStart;

    double videoThrottlingTimeout;

    _Bool useAWDStats;

    VCSessionMessaging *messaging;

    _Bool isCurrentNetworkBad;

    _Bool requestedTimeoutRelay;

    unsigned int callSessionBitrate;

    NSObject<OS_dispatch_queue> *cellTechQueue;

    NSObject<OS_dispatch_source> *cellTechChangeSource;

    VCBitrateArbiter *callSessionBitrateArbiter;

    NSObject<OS_dispatch_source> *connectionTimeoutSource;

    unsigned short maxPacketLength;

    double lastTierSwitch;

    _Bool audioTierHysteresis;

    long long initialSentBytes;

    long long initialReceivedBytes;

    VCJitterBuffer *vcJitterBuffer;

    struct tagHANDLE *hVideoReceiver;

    struct tagHANDLE *hVideoTransmitter;

    _Bool remoteSupportsVisibleRect;

    _Bool remoteSupportsExpectedAspectRatio;

    _Bool canLocalResizePIP;

    _Bool canRemoteResizePIP;

    _Bool receivedFirstRemoteFrame;

    int fecMode;

    NSObject<OS_dispatch_source> *sessionHealthMonitor;

    VideoAttributes *remoteVideoAttributes;

    double lastVideoQualityNotificationUpdate;

    unsigned int remoteFrameWidth;

    unsigned int remoteFrameHeight;

    GKInterfaceListener *interfaceListener;

    VCWCMClient *vcWCMClient;

    NSCondition *connectionDataTimeoutCondVar;

    VCTransport *transport;

    struct OpaqueVTPixelTransferSession *hdTransferSession;

    struct __CVPixelBufferPool *hdBufferPool;

    struct CGSize expectedDecodeSize;

    struct opaqueRTCReporting *reportingAgent;

    int reportUpdateInterval;

    int reportReportFrequency;

    _Bool enableAFRCDump;

    int operatingMode;

    unsigned int receivedAudioBytes;

    unsigned int sentAudioBytes;

    double lastVCLogCallbackTime;

    struct SKEStateOpaque *skeState;

    struct __CFData *secretKey;

    unsigned int dwRTT_ice;

    NSObject<OS_dispatch_queue> *timestampQueue;

}



+ (id)keyPathsForValuesAffectingNetworkQuality;

- (int)Conference_SetBWEstMode:(_Bool)arg1 bFakeLargeFrameMode:(_Bool)arg2;

- (id)addAudioPayload:(int)arg1;

- (void)adjustBitrateForConnectionType;

- (id)allPayloadsLocalFeaturesString;

- (_Bool)allocateBundleBuffer;

@property(readonly) _Bool audioIsPaused; // @synthesize audioIsPaused;

- (unsigned int)audioRTPID;

@property(readonly, nonatomic) int audioTxBitrate; // @synthesize audioTxBitrate;

@property int bandwidthDownstream; // @synthesize bandwidthDownstream;

@property int bandwidthUpstream; // @synthesize bandwidthUpstream;

- (int)bundleAndSendSamples:(char *)arg1 numEncodedBytes:(int)arg2 withPayload:(int)arg3 timeStamp:(unsigned int)arg4 bufferedSamples:(int)arg5 hasNewSamples:(_Bool)arg6;

- (_Bool)bundleAudio:(void *)arg1 withPayload:(int)arg2 numInputBytes:(int)arg3;

@property int bundledPackets; // @synthesize bundledPackets;

- (long long)calculateSIPEndAction:(_Bool)arg1 currentState:(long long)arg2 error:(id)arg3;

- (void)callAlarmsWithRTPTimeStamp:(unsigned int)arg1;

- (unsigned int)callID;

- (id)callMetadata;

- (_Bool)canNegotiateVideoPayload:(int)arg1;

- (void)cancelConnectionTimeoutTimer;

- (_Bool)chooseAudioNetworkBitrate;

- (_Bool)choosePayload:(int *)arg1 count:(int)arg2;

- (_Bool)chooseSecondaryPayloads:(int *)arg1 count:(int)arg2;

- (_Bool)chooseVideoPayload:(int *)arg1 count:(int)arg2;

- (void)cleanupMedia;

- (unsigned int)codecBitmapForPayloads:(int *)arg1 count:(int)arg2;

@property struct tagCONNRESULT connectionResult; // @synthesize connectionResult;

- (unsigned int)connectionResultCallback:(struct tagCONNRESULT *)arg1 didReceiveICEPacket:(_Bool)arg2 didUseRelay:(_Bool)arg3 secretKey:(struct __CFData *)arg4 skeResult:(int)arg5;

- (void)connectionResultFromSIP:(struct tagSIPCallbackData *)arg1;

- (unsigned int)connectionType;

- (_Bool)createConnectionDataForParticipantID:(id)arg1 pCallID:(unsigned int *)arg2 nonCellularCandidateTimeout:(double)arg3 error:(id *)arg4 useRelay:(_Bool)arg5;

- (id)createInitiateRelayDictionary;

- (id)createLocalFeaturesString;

- (_Bool)createMediaQueueHandle:(id *)arg1;

- (_Bool)createRTPHandles:(id *)arg1;

- (id)createRelayUpdateDictionary:(id)arg1;

- (_Bool)createSDP:(int *)arg1 audioPayloadCount:(int)arg2 secondaryPayloadTypes:(int *)arg3 secondaryPayloadCount:(int)arg4 videoPayloadTypes:(int *)arg5 videoPayloadCount:(int)arg6 localFeaturesList:(id)arg7 answerBandwidth:(int)arg8 maxBandwidth:(int)arg9 imageSizesSend:(struct imageTag **)arg10 imageSendCount:(int *)arg11 imageSizesRecv:(struct imageTag **)arg12 imageRecvCount:(int *)arg13 sdp:(char *)arg14 numSDPBytes:(int *)arg15 error:(id *)arg16;

- (id)createSKEBlobWithRemoteSKEBlob:(id)arg1;

- (_Bool)createTCPTunnelForParticipantID:(id)arg1 relayDictionary:(id)arg2 didOriginateRequest:(_Bool)arg3 relayType:(unsigned char)arg4 error:(id *)arg5;

@property(readonly, nonatomic) AVAudioPayload *currentAudioPayload; // @synthesize currentAudioPayload;

- (void)dealloc;

@property(retain) NSObject<VCCallSessionDelegate> *delegate; // @synthesize delegate;

- (void)deleteTCPTunnel;

- (id)deriveAspectRatioFLS;

- (id)description;

@property _Bool didUseICE; // @synthesize didUseICE;

- (void)disableSessionHealthMonitor;

- (_Bool)disconnect:(id)arg1 didRemoteCancel:(_Bool)arg2;

- (void)disconnectWithNoRemotePackets:(long long)arg1;

- (void)disconnectWithNoRemotePackets:(long long)arg1 timeoutUsed:(double)arg2;

- (_Bool)doBandwidthDetection:(struct tagHANDLE *)arg1 error:(id *)arg2;

- (void)doSipEndAction:(int)arg1 callID:(unsigned int)arg2 error:(id)arg3;

- (void)doSipEndProc:(id)arg1;

- (void)enableSessionHealthMonitor;

- (int)encodeAudio:(void *)arg1 numInputBytes:(int)arg2 outputBytes:(void *)arg3 numOutputBytes:(int)arg4 withPayload:(int *)arg5;

- (_Bool)evaluateEnableRRx:(int *)arg1;

- (_Bool)findFeatureString:(const char *)arg1 value:(char *)arg2 valueLength:(unsigned long long)arg3 withPrefix:(const char *)arg4;

- (int)generateConnectionData:(char **)arg1 forCallID:(unsigned int)arg2 connectionDataSize:(int *)arg3 nonCellularCandidateTimeout:(double)arg4;

- (int)getAllCompatibleVideoPayloads:(int **)arg1;

- (void)getAllPayloadsForAudio:(int **)arg1 count:(int *)arg2 secondaryPayloads:(int **)arg3 secondaryCount:(int *)arg4;

- (void)getAllPayloadsForVideo:(int **)arg1 count:(int *)arg2;

- (id)getCompatibleLocalFeaturesListForPayloads:(int *)arg1 count:(int)arg2;

- (void)getDecodePayloads:(int **)arg1 numPayloads:(int *)arg2 withPayload:(int)arg3 secondaryPayloads:(int *)arg4 numSecondaryPayloads:(int)arg5;

- (_Bool)getForcedPayload:(int *)arg1;

- (_Bool)getRealAudioTxBitrate:(unsigned short *)arg1 RxBitrate:(unsigned short *)arg2 duplication:(unsigned short *)arg3;

- (void)getVideoSettings:(int)arg1 width:(int *)arg2 height:(int *)arg3 framerate:(int *)arg4 bitRate:(int *)arg5;

@property struct tagHANDLE *hAFRC; // @synthesize hAFRC;

@property struct tagHANDLE *hMediaQueue; // @synthesize hMediaQueue;

- (void)handleCellTechChange:(int)arg1 cellularMaxPktLen:(unsigned short)arg2;

- (int)handleIncomingWithCallID:(unsigned int)arg1 msgIn:(const char *)arg2 msgOut:(char *)arg3 optional:(void *)arg4 confIndex:(int *)arg5 error:(id *)arg6;

- (_Bool)handshakeComplete:(struct SSLContext *)arg1 withError:(struct __CFError **)arg2;

- (double)iceTimeoutInSeconds:(_Bool)arg1;

- (id)init;

- (void)initWithRelevantStorebagEntries;

- (_Bool)initializeVideoReceiver:(id *)arg1 reportingAgent:(struct opaqueRTCReporting *)arg2;

- (_Bool)initializeVideoTransmitter:(id *)arg1 encodeRule:(id)arg2 unpausing:(_Bool)arg3 reportingAgent:(struct opaqueRTCReporting *)arg4;

- (void)initiateRelayRequest;

@property unsigned char inputMeter; // @synthesize inputMeter;

- (void)interfaceStateDidChangeWithWifiUp:(_Bool)arg1 withCellUp:(_Bool)arg2;

- (id)inviteDataForParticipantID:(id)arg1 callID:(unsigned int *)arg2 remoteInviteData:(id)arg3 nonCellularCandidateTimeout:(double)arg4 error:(id *)arg5;

- (void)inviteeICEResultTimer:(float)arg1 shouldBailIfRelay:(_Bool)arg2;

- (_Bool)is3GCall;

@property(readonly) _Bool isAudioRunning; // @synthesize isAudioRunning;

- (_Bool)isBetterForIncomingSIPThanOtherSession:(id)arg1 result:(struct tagCONNRESULT *)arg2;

- (_Bool)isCallOngoing;

@property(readonly, nonatomic) _Bool isCaller;

@property _Bool isGKVoiceChat;

@property(nonatomic) _Bool isRTCPFBEnabled; // @synthesize isRTCPFBEnabled;

@property(readonly) _Bool isRemoteMediaStalled; // @synthesize isRemoteMediaStalled;

@property(readonly) _Bool isSKEOptimizationEnabled;

@property(nonatomic) _Bool isStarted; // @synthesize isStarted;

@property _Bool isWaitingForICEResult; // @synthesize isWaitingForICEResult;

@property unsigned int lastReceived; // @synthesize lastReceived;

@property(nonatomic) unsigned int lastSentAudioSampleTime; // @synthesize lastSentAudioSampleTime;

- (void)launchDeadlineExitTimer;

- (id)localParticipantID;

- (void)lock;

- (void)logConnectionSuccess;

- (void)logConnectionType:(int)arg1;

- (void)logDetailedNetworkInformation;

- (void)logIdentity:(struct __SecIdentity *)arg1;

- (void)loopbackSocketTunnel:(id)arg1 receivedData:(id)arg2 from:(struct tagIPPORT *)arg3;

- (char *)matchedFeaturesString;

- (unsigned int)maxBitrateForConnectionType;

@property unsigned short maxPacketLength; // @synthesize maxPacketLength;

@property(retain, nonatomic) NSArray *mutedPeers; // @synthesize mutedPeers;

@property(nonatomic) int natType; // @synthesize natType;

- (int)negotiateFeaturesString:(id)arg1 forPaylosd:(int)arg2;

- (_Bool)negotiateMaxBandwidth:(int *)arg1;

- (_Bool)negotiatePayloads:(int **)arg1 numPayloads:(int *)arg2 withError:(id *)arg3;

@property(nonatomic) double networkConditionsTimeoutInSeconds; // @synthesize networkConditionsTimeoutInSeconds;

@property(readonly) double networkQuality;

- (id)newRemoteScreenAttributesForOrientation:(int)arg1;

- (float)nextAudioInterval:(int)arg1;

- (void)notifyDelegateAndEndCall:(long long)arg1 didRemoteCancel:(_Bool)arg2 error:(id)arg3;

- (void)notifyDelegateSessionStarted;

- (void)notifyDelegateToCancelRelay;

@property int numBufferBytesAvailable; // @synthesize numBufferBytesAvailable;

@property int numEncodedBytes; // @synthesize numEncodedBytes;

- (_Bool)onCaptureFrame:(struct __CVBuffer *)arg1 audioTS:(unsigned int)arg2 audioHT:(double)arg3 videoHT:(double)arg4 cameraBits:(unsigned char)arg5;

- (void)onPlayVideo:(struct __CVBuffer *)arg1 frameTime:(CDStruct_198678f7)arg2 cameraStatusBits:(unsigned char)arg3;

@property(nonatomic) int operatingMode; // @synthesize operatingMode;

@property struct tagCONNRESULT origConnectionResult; // @synthesize origConnectionResult;

@property(nonatomic) float packetLateAndMissingRatio; // @synthesize packetLateAndMissingRatio;

@property(nonatomic) double packetLossRate; // @synthesize packetLossRate;

@property int packetsPerBundle;

@property(copy, nonatomic) NSString *peerCN; // @synthesize peerCN;

- (id)pickFeaturesStringForPayload:(int)arg1 featuresListDict:(id)arg2 remote:(_Bool)arg3;

@property int preferredAudioCodec; // @synthesize preferredAudioCodec;

@property struct tagCONNRESULT prevConnectionResult; // @synthesize prevConnectionResult;

- (void)processCancelRelayRequest:(id)arg1 didOriginateRequest:(_Bool)arg2;

- (void)processConnectionResultUpdate;

- (void)processRelayRequestResponseDict:(id)arg1 didOriginateRequest:(_Bool)arg2;

- (void)processRelayUpdateDict:(id)arg1 didOriginateRequest:(_Bool)arg2;

- (void)processRemoteIPChange:(id)arg1 callID:(unsigned int)arg2;

- (void)processResolutionChangeToVideoRule:(id)arg1;

- (void)processSIPMessage:(char *)arg1 msgOut:(char *)arg2 optional:(void *)arg3 confIndex:(int *)arg4;

- (_Bool)pullAudioSamples:(char *)arg1 timestamp:(unsigned int *)arg2 byteCount:(int *)arg3 sampleCount:(int *)arg4 sampleRate:(int *)arg5 receivedBytes:(int *)arg6 lastReceivedAudioTime:(double *)arg7 padding:(char *)arg8 paddingLength:(char *)arg9 silence:(int *)arg10;

@property NSObject<VideoConferenceChannelQualityDelegate> *qualityDelegate;

- (void)rcvdFirstRemoteFrame;

- (void)receivedRealTimeData:(id)arg1 fromParticipantID:(id)arg2;

@property _Bool receivedSIPInvite; // @synthesize receivedSIPInvite;

- (void)remoteCellTechStateUpdate:(int)arg1 maxRemoteBitrate:(unsigned int)arg2;

@property unsigned int remoteFrameHeight; // @synthesize remoteFrameHeight;

@property unsigned int remoteFrameWidth; // @synthesize remoteFrameWidth;

- (id)remoteParticipantID;

- (void)remotePauseDidChangeToState:(_Bool)arg1 forVideo:(_Bool)arg2;

@property(retain, nonatomic) VideoAttributes *remoteVideoAttributes; // @synthesize remoteVideoAttributes;

- (void)reportDashboardEndResult;

@property(nonatomic) _Bool requiresWifi; // @synthesize requiresWifi;

- (void)resetICETimeoutToLongTimeout;

- (void)resetLoopback;

- (void)resetState;

- (_Bool)resultMatchesIPInRemoteConnectionData:(struct tagCONNRESULT *)arg1;

- (struct __SecIdentity *)retrieveIdentity;

- (id)retrieveRawFeaturesString;

@property(retain, nonatomic) GKRingBuffer *ringBuf; // @synthesize ringBuf;

@property(nonatomic) unsigned int roundTripTime; // @synthesize roundTripTime;

@property NSObject<VideoConferenceRealTimeChannel> *rtChannel; // @synthesize rtChannel;

- (int)rtcpDescriptor;

@property struct tagHANDLE *rtpHandle; // @synthesize rtpHandle;

@property long long sampleRate; // @synthesize sampleRate;

- (void)sendARPLData:(id)arg1 toCallID:(unsigned int)arg2;

- (int)sendAudioBundle:(_Bool)arg1 atTimeStamp:(unsigned int)arg2 nextInterval:(float)arg3;

- (int)sendAudioHeartbeat:(unsigned int)arg1;

- (_Bool)sendSIPInviteWithError:(id *)arg1;

- (void)sendThreadedAudio:(struct tagEncodedAudio *)arg1 buffer:(char *)arg2 bufferSize:(unsigned int)arg3;

- (void)sendTimings;

@property(copy, nonatomic) NSString *sessionID; // @synthesize sessionID;

- (double)sessionReceivingBitrate;

- (double)sessionReceivingFramerate;

- (double)sessionTransmittingBitrate;

- (double)sessionTransmittingFramerate;

- (void)setLocalIdentityForKeyExchange;

- (_Bool)setMatchedFeaturesString:(id)arg1 remoteFeaturesString:(id)arg2;

- (_Bool)setPauseAudio:(_Bool)arg1 error:(id *)arg2;

- (_Bool)setPauseAudio:(_Bool)arg1 force:(_Bool)arg2 error:(id *)arg3;

- (_Bool)setPauseVideo:(_Bool)arg1 error:(id *)arg2;

- (_Bool)setPauseVideo:(_Bool)arg1 force:(_Bool)arg2 error:(id *)arg3;

- (_Bool)setRTPDestinationWithError:(id *)arg1;

- (_Bool)setRTPPayloads:(int *)arg1 numPayloads:(int)arg2 withError:(id *)arg3;

@property(nonatomic) _Bool shouldSendAudio; // @synthesize shouldSendAudio;

@property _Bool shouldTimeoutPackets; // @synthesize shouldTimeoutPackets;

@property(nonatomic) int signalGrade; // @synthesize signalGrade;

@property(nonatomic) int signalRaw; // @synthesize signalRaw;

@property(nonatomic) int signalStrength; // @synthesize signalStrength;

@property(retain) NSData *srtpKeyBytes; // @synthesize srtpKeyBytes;

@property long long state; // @synthesize state;

@property(nonatomic) _Bool useAFRC; // @synthesize useAFRC;

@property(nonatomic) _Bool useCompressedConnectionData; // @synthesize useCompressedConnectionData;

@property _Bool useControlByte; // @synthesize useControlByte;

@property _Bool useUEP; // @synthesize useUEP;

@property long long videoPayload; // @synthesize videoPayload;

- (void)setupAACELDPayload:(int)arg1;

- (_Bool)setupAudioCodecWithPayload:(int)arg1;

- (_Bool)setupAudioCookies;

- (_Bool)setupAudioEncoders;

- (void)setupAudioPauseMessages;

- (void)setupAudioPausedHBMessages;

- (_Bool)setupAudioTierPicker;

- (void)setupBitrateNegotation;

- (_Bool)setupCallerRTPChannelWithError:(id *)arg1;

- (void)setupCellTechChangeMessages;

- (void)setupConnectionTimeoutTimerWithErrorCode:(int)arg1 detailedCode:(int)arg2 description:(id)arg3 reason:(id)arg4;

- (void)setupDTLSDefaults;

- (void)setupEncryptionWithKey:(const struct __CFData **)arg1 confIndex:(int *)arg2;

- (void)setupLoopback;

- (void)setupMessaging;

- (void)setupPeerInfo:(id)arg1 usingInviteData:(id)arg2 isCaller:(_Bool)arg3 capabilities:(id)arg4;

- (void)setupTransport;

- (void)setupVideoPauseMessages;

- (void)shutdownVoiceChatFromRemoteSIPSignal:(int)arg1;

- (int)sipCallback:(int)arg1 callID:(unsigned int)arg2 msgIn:(const char *)arg3 msgOut:(char *)arg4 optional:(void *)arg5 confIndex:(int *)arg6;

- (void)sipConnectThreadProc:(id)arg1;

- (_Bool)sipConnectWithError:(id *)arg1;

- (_Bool)startAFRC:(id *)arg1;

- (void)startAWDStats;

- (void)startAudioWithCompletionHandler:(id)arg1;

- (_Bool)startConnectionWithParticipantID:(id)arg1 callID:(unsigned int)arg2 usingBlob:(id)arg3 isCaller:(_Bool)arg4 capabilities:(id)arg5 useRelay:(_Bool)arg6 error:(id *)arg7;

- (_Bool)startConnectionWithParticipantID:(id)arg1 callID:(unsigned int)arg2 usingInviteData:(id)arg3 isCaller:(_Bool)arg4 capabilities:(id)arg5 error:(id *)arg6;

- (_Bool)startMediaQueue:(id *)arg1;

- (void)startPausedHeartbeat;

- (_Bool)startRTPWithError:(id *)arg1;

- (_Bool)startVideo:(_Bool)arg1 error:(id *)arg2;

- (_Bool)stillWantsToRelay;

- (_Bool)stopAFRC:(id *)arg1;

- (void)stopAudio;

- (void)stopAudioIOProc:(id)arg1;

- (void)stopLoopback;

- (void)stopLoopbackProc:(id)arg1;

- (_Bool)stopMediaQueue:(id *)arg1;

- (void)stopPausedHeartbeat;

- (_Bool)stopVideo:(_Bool)arg1 error:(id *)arg2;

- (void)timeoutUnfinishedConnection;

- (_Bool)treatAsCellular;

- (void)unlock;

- (void)updateAudioTxBitrate;

- (void)updateLastReceivedAudioTime;

- (void)updateLastReceivedPacket:(_Bool)arg1;

- (void)updateLastReceivedPacketWithTimestamp:(double)arg1;

- (void)updateMaxPktLength:(struct tagCONNRESULT *)arg1;

- (void)updateNetworkCheckHint:(double)arg1;

- (void)updateQOS;

- (void)updateRemoteMediaStallState:(double)arg1;

- (void)updateVideoQualityNotification:(double)arg1;

- (void)updateVideoQualityStatus:(double)arg1 bitrate:(double)arg2 time:(double)arg3 isRemote:(_Bool)arg4;

- (void)useAudioPayload:(id)arg1 withBitrate:(unsigned int)arg2;

- (void)useAudioTier:(id)arg1;

@property(readonly) VCJitterBuffer *vcJitterBuffer; // @synthesize vcJitterBuffer;

@property(readonly) _Bool videoIsPaused;

- (unsigned int)videoRTPID;

- (void)wcmGetCallConfig:(unsigned int *)arg1 targetBitrate:(unsigned int *)arg2;

- (void)wcmSetCallConfig:(unsigned int)arg1 interferenceLevel:(unsigned int)arg2;



@end


