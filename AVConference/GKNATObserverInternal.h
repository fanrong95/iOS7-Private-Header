/*

 *     Generated by class-dump 3.4 (64 bit).

 *

 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.

 */



#import "GKNATObserver.h"


@class GKNATObserver_SCContext, NSMutableDictionary, NSObject<OS_dispatch_group>, NSObject<OS_dispatch_queue>, NSObject<OS_dispatch_semaphore>, NSRecursiveLock;



__attribute__((visibility("hidden")))

@interface GKNATObserverInternal : GKNATObserver

{

    id <GKNATObserverDelegate> _delegate;

    struct __SCDynamicStore *_dynamicStore;

    NSRecursiveLock *_xNATCheck;

    int _lastReportedNATType;

    int _lastReportedCarrierNATType;

    int _lastReportedNonCarrierNATType;

    NSMutableDictionary *_interfaceInfoDictionary;

    _Bool _nonCarrierInterfacesOnly;

    _Bool _checkTCPAndSSL;

    _Bool _favorNonCarrier;

    _Bool _newCarrierType;

    _Bool _addInRangeFlag;

    _Bool _addCarrierFlag;

    _Bool _ignoreNatTypeCache;

    _Bool _ignoreCarrierBundle;

    int _NATCheckRetryCount;

    double _NATCheckRetryDelay;

    NSMutableDictionary *_currentNetworkNames;

    NSObject<OS_dispatch_queue> *_natCheckQueue;

    NSObject<OS_dispatch_queue> *_reportNATQueue;

    NSObject<OS_dispatch_group> *_natCheckGroup;

    NSObject<OS_dispatch_semaphore> *_natCheckNetNameSema;

    _Bool _fNATCheckQueued;

    _Bool _fNATCheckInProgress;

    GKNATObserver_SCContext *_sccontext;

    _Bool _hasNATCheckStarted;

    _Bool _hasNATCheckEnded;

}



- (void)HTTPCheckWithIPPort:(struct tagIPPORT *)arg1 useCache:(_Bool)arg2;

- (void)HTTPSCheckWithIPPort:(struct tagIPPORT *)arg1 useCache:(_Bool)arg2;

- (void)NATCheckWithIPPort:(struct tagIPPORT *)arg1 useCache:(_Bool)arg2;

- (void)cacheNATFlags:(id)arg1 forNetwork:(id)arg2;

- (void)calculateSummmaryNATType:(int *)arg1 andCarrierNATType:(int *)arg2 andNonCarrierNATType:(int *)arg3 copyInterfaceInfoDictionary:(id *)arg4;

- (struct tagCommNATInfo *)callCommNATTestFromIPPort:(struct tagIPPORT *)arg1;

- (int)callHTTPTestFromIPPort:(struct tagIPPORT *)arg1 ToServer:(id)arg2 isSSL:(_Bool)arg3;

- (void)clearRetries;

- (int)currentNATType;

- (void)dealloc;

- (id)delegate;

- (_Bool)ensureNatCachePathExists;

- (id)init;

- (id)initWithOptions:(id)arg1;

- (id)lookupCachedNATFlagsForNetwork:(id)arg1;

- (id)nameForNetworkWithIPPort:(struct tagIPPORT *)arg1 interfaceName:(id)arg2;

- (int)natTypeForCommNATFlags:(unsigned int)arg1 isCarrier:(_Bool)arg2 commnatFlagsCached:(_Bool)arg3 tcpFlagsCached:(_Bool)arg4 sslFlagsCached:(_Bool)arg5;

- (void)registerForNetworkChanges;

- (oneway void)release;

- (void)reportNATType;

- (id)retrieveNatTypeCache;

- (id)retrieveNatTypeCache_CachePlistScheme;

- (id)retrieveNatTypeCache_OSXGamedScheme;

- (unsigned int)setCommNATFlags:(unsigned int)arg1 forInterface:(id)arg2 isCached:(_Bool)arg3;

- (void)setDelegate:(id)arg1;

- (unsigned int)setFlags:(unsigned int)arg1 forInterface:(id)arg2 isCached:(_Bool)arg3 isCachedKey:(id)arg4 mask:(unsigned int)arg5;

- (unsigned int)setSSLFlags:(unsigned int)arg1 forInterface:(id)arg2 isCached:(_Bool)arg3;

- (unsigned int)setTCPFlags:(unsigned int)arg1 forInterface:(id)arg2 isCached:(_Bool)arg3;

- (void)shouldTryNATCheck;

- (void)tryNATCheckWithDelay:(double)arg1;

- (void)updateNatTypeCache:(id)arg1;

- (void)updateNatTypeCache_CachePlistScheme:(id)arg1;

- (void)updateNatTypeCache_OSXGamedScheme:(id)arg1;



@end


