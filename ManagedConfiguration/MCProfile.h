/*

 *     Generated by class-dump 3.4 (64 bit).

 *

 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.

 */





@class NSArray, NSDate, NSDictionary, NSObject<OS_dispatch_queue>, NSString;



@interface MCProfile : NSObject

{

    int _trustQueueTrustLevel;

    _Bool _trustQueueTrustHasBeenEvaluated;

    NSObject<OS_dispatch_queue> *_trustEvaluationQueue;

    NSString *_signerQueueSignerSummary;

    NSArray *_signerQueueSignerCertificates;

    NSObject<OS_dispatch_queue> *_signerEvaluationQueue;

    _Bool _encrypted;

    _Bool _isLocked;

    _Bool _needsReboot;

    _Bool _isStub;

    _Bool _mustInstallNonInteractively;

    NSString *_profileDescription;

    NSString *_displayName;

    NSString *_identifier;

    NSString *_UUID;

    NSString *_organization;

    long long _version;

    NSDate *_installDate;

    NSDate *_expiryDate;

    NSString *_removalPasscode;

    NSString *_productVersion;

    NSString *_productBuildVersion;

    NSDate *_removalDate;

    NSDictionary *_installOptions;

    NSString *_localizedConsentText;

}



+ (id)_malformedProfileError;

+ (id)badFieldTypeErrorWithField:(id)arg1;

+ (_Bool)checkString:(id)arg1 isOneOfStrings:(id)arg2 key:(id)arg3 errorDomain:(id)arg4 errorCode:(long long)arg5 errorString:(id)arg6 outError:(id *)arg7;

+ (id)dataFromCMSEncodedData:(id)arg1 outSignerCertificates:(id *)arg2;

+ (int)evaluateTrust:(struct __SecTrust *)arg1;

+ (int)evaluateTrustOfCertificateChain:(id)arg1;

+ (int)evaluateTrustOfCertificateChain:(id)arg1 outIsAllowedToWriteDefaults:(_Bool *)arg2;

+ (id)missingFieldErrorWithField:(id)arg1;

+ (id)profileDictionaryFromProfileData:(id)arg1 outError:(id *)arg2;

+ (id)profileWithData:(id)arg1 fileName:(id)arg2 allowEmptyPayload:(_Bool)arg3 outError:(id *)arg4;

+ (id)profileWithData:(id)arg1 fileName:(id)arg2 outError:(id *)arg3;

+ (id)profileWithData:(id)arg1 outError:(id *)arg2;

+ (id)profileWithDictionary:(id)arg1 fileName:(id)arg2 allowEmptyPayload:(_Bool)arg3 outError:(id *)arg4;

+ (id)removeOptionalNonZeroLengthStringInDictionary:(id)arg1 key:(id)arg2 errorDomain:(id)arg3 invalidDataCode:(long long)arg4 invalidDataErrorString:(id)arg5 outError:(id *)arg6;

+ (id)removeOptionalObjectInDictionary:(id)arg1 key:(id)arg2 type:(Class)arg3 errorDomain:(id)arg4 invalidDataCode:(long long)arg5 invalidDataErrorString:(id)arg6 outError:(id *)arg7;

+ (id)removeRequiredNonZeroLengthStringInDictionary:(id)arg1 key:(id)arg2 errorDomain:(id)arg3 missingDataCode:(long long)arg4 missingDataErrorString:(id)arg5 invalidDataCode:(long long)arg6 invalidDataErrorString:(id)arg7 outError:(id *)arg8;

+ (id)removeRequiredObjectInDictionary:(id)arg1 key:(id)arg2 type:(Class)arg3 errorDomain:(id)arg4 missingDataCode:(long long)arg5 missingDataErrorString:(id)arg6 invalidDataCode:(long long)arg7 invalidDataErrorString:(id)arg8 outError:(id *)arg9;

+ (id)signerSummaryOfCertificate:(struct __SecCertificate *)arg1;

- (void).cxx_destruct;

@property(readonly, nonatomic) NSString *UUID; // @synthesize UUID=_UUID;

@property(readonly, nonatomic) NSString *UUIDHashFileName;

- (_Bool)containsPayloadOfClass:(Class)arg1;

- (unsigned long long)countOfPayloadsOfClass:(Class)arg1;

- (id)description;

@property(retain, nonatomic) NSString *displayName; // @synthesize displayName=_displayName;

@property(readonly, nonatomic) NSDate *earliestCertificateExpiryDate;

- (void)evaluateSignerTrust;

- (void)evaluateSignerTrustAsynchronouslyWithCompletion:(id)arg1;

@property(readonly, nonatomic) NSDate *expiryDate; // @synthesize expiryDate=_expiryDate;

@property(readonly, nonatomic) NSString *friendlyName;

@property(readonly, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;

- (id)initWithDictionary:(id)arg1 allowEmptyPayload:(_Bool)arg2 outError:(id *)arg3;

@property(retain, nonatomic) NSDate *installDate; // @synthesize installDate=_installDate;

@property(retain, nonatomic) NSDictionary *installOptions; // @synthesize installOptions=_installOptions;

@property(readonly, nonatomic) NSArray *installationWarnings;

- (id)installationWarningsIncludeUnsignedProfileWarning:(_Bool)arg1;

@property(nonatomic, getter=isEncrypted) _Bool encrypted; // @synthesize encrypted=_encrypted;

@property(nonatomic, getter=isLocked) _Bool locked; // @synthesize locked=_isLocked;

@property(readonly, nonatomic) _Bool isManagedByProfileService;

@property(readonly, nonatomic) _Bool isSigned;

@property(readonly, nonatomic) _Bool isStub; // @synthesize isStub=_isStub;

@property(readonly, nonatomic) NSString *localizedConsentText; // @synthesize localizedConsentText=_localizedConsentText;

@property(readonly, nonatomic) NSArray *localizedPayloadSummaryByType;

- (id)malformedProfileErrorWithError:(id)arg1;

- (_Bool)mayInstallWithOptions:(id)arg1 hasInteractionClient:(_Bool)arg2 outError:(id *)arg3;

@property(nonatomic) _Bool mustInstallNonInteractively; // @synthesize mustInstallNonInteractively=_mustInstallNonInteractively;

@property(readonly, nonatomic) _Bool needsReboot; // @synthesize needsReboot=_needsReboot;

@property(readonly, nonatomic) NSString *organization; // @synthesize organization=_organization;

- (id)payloadWithUUID:(id)arg1;

@property(readonly, nonatomic) NSArray *payloads;

@property(readonly, nonatomic) NSString *productBuildVersion; // @synthesize productBuildVersion=_productBuildVersion;

@property(readonly, nonatomic) NSString *productVersion; // @synthesize productVersion=_productVersion;

@property(readonly, nonatomic) NSString *profileDescription; // @synthesize profileDescription=_profileDescription;

@property(readonly, nonatomic) NSString *profileIDHashFileName;

@property(readonly, nonatomic) NSDate *removalDate; // @synthesize removalDate=_removalDate;

@property(retain, nonatomic) NSString *removalPasscode; // @synthesize removalPasscode=_removalPasscode;

@property(retain, nonatomic) NSArray *signerCertificates;

@property(readonly, nonatomic) struct __SecCertificate *signerCertificate;

@property(readonly, nonatomic) NSString *signerSummary;

- (id)stubDictionary;

@property(readonly, nonatomic) NSString *stubFileName;

@property(readonly, nonatomic) int trustLevel;

@property(readonly, nonatomic) long long version; // @synthesize version=_version;

- (_Bool)writeStubToDirectory:(id)arg1;

- (_Bool)writeStubToPath:(id)arg1;



@end


