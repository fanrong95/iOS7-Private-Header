/*

 *     Generated by class-dump 3.4 (64 bit).

 *

 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2012 by Steve Nygard.

 */





#import "NSCoding.h"

#import "NSCopying.h"



@class CIFilter, NSArray, NSString, SKTextureCache;



@interface SKTexture : NSObject <NSCopying, NSCoding>

{

    _Bool _shouldGenerateMipmaps;

    _Bool _didGenerateMipmaps;

    _Bool _isPath;

    _Bool _isData;

    NSString *_imgName;

    NSArray *_searchPaths;

    struct CGRect _textRect;

    struct CGRect _textCoords;

    _Bool _disableAlpha;

    _Bool _isRotated;

    struct CGPoint _cropScale;

    struct CGPoint _cropOffset;

    int _alignment;

    int _rowLength;

    _Bool _isCompressed;

    int _compressedSize;

    unsigned int _compressedFormat;

    CIFilter *_filter;

    SKTexture *_originalTexture;

    long long _filteringMode;

    int _wrapMode;

    unsigned int _textureTarget;

    NSString *_originalAtlasName;

    NSString *_subTextureName;

    SKTextureCache *_textureCache;

    unsigned int *_alphaMap;

    struct CGSize _alphaMapSize;

}



+ (id)_textureByTransferingData:(char *)arg1 size:(struct CGSize)arg2;

+ (id)_textureByTransferingData:(char *)arg1 size:(struct CGSize)arg2 rowLength:(unsigned int)arg3 alignment:(unsigned int)arg4;

+ (id)_textureWithGLTextureId:(unsigned int)arg1 size:(struct CGSize)arg2;

+ (id)_textureWithImageNamed:(id)arg1;

+ (void)addTextureToPreloadlist:(id)arg1;

+ (id)compressedTextureWithData:(id)arg1;

+ (id)compressedTextureWithData:(id)arg1 size:(struct CGSize)arg2 bitsPerPixel:(unsigned int)arg3 hasAlpha:(_Bool)arg4;

+ (void)deleteUnusedTextures;

+ (id)lookupTextureCacheForName:(id)arg1;

+ (void)preloadTextures;

+ (void)preloadTextures:(id)arg1 withCompletionHandler:(id)arg2;

+ (void)registerTextureCache:(id)arg1 forName:(id)arg2;

+ (id)textureWithCGImage:(struct CGImage *)arg1;

+ (id)textureWithData:(id)arg1 size:(struct CGSize)arg2;

+ (id)textureWithData:(id)arg1 size:(struct CGSize)arg2 rowLength:(unsigned int)arg3 alignment:(unsigned int)arg4;

+ (id)textureWithImage:(id)arg1;

+ (id)textureWithImageNamed:(id)arg1;

+ (id)textureWithImageNamed:(id)arg1 rect:(struct CGRect)arg2;

+ (id)textureWithImagePath:(id)arg1;

+ (id)textureWithRect:(struct CGRect)arg1 inTexture:(id)arg2;

+ (void)updateTextures;

- (id).cxx_construct;

- (void).cxx_destruct;

- (void)_ensureImageData;

- (void)_loadOnTextureQueue;

- (struct CGImage *)_newTextureFromGLCache;

- (void)_savePngFromGLCache:(id)arg1;

@property(readonly, nonatomic) unsigned int *alphaMap; // @synthesize alphaMap=_alphaMap;

@property(readonly, nonatomic) struct CGSize alphaMapSize; // @synthesize alphaMapSize=_alphaMapSize;

- (struct CGImage *)alphaMask;

- (_Bool)alphaTestX:(double)arg1 y:(double)arg2;

- (void)commonInit;

- (id)copyWithZone:(struct _NSZone *)arg1;

@property(nonatomic) struct CGPoint cropOffset; // @synthesize cropOffset=_cropOffset;

@property(nonatomic) struct CGPoint cropScale; // @synthesize cropScale=_cropScale;

- (void)dealloc;

- (id)description;

@property(nonatomic) _Bool disableAlpha;

- (void)encodeWithCoder:(id)arg1;

@property(nonatomic) long long filteringMode;

- (void)generateAlphaMapOfSize:(struct CGSize)arg1 fromImage:(struct CGImage *)arg2;

- (int)glTextureId;

@property(readonly, nonatomic) _Bool hasAlpha;

@property(readonly, nonatomic) NSString *imageNameOrPath;

- (id)imgName;

- (id)init;

- (void)initTextureCacheWithImageData;

- (id)initWithCoder:(id)arg1;

- (id)initWithImageNamed:(id)arg1;

- (id)initWithImagePath:(id)arg1;

- (_Bool)isInMemory;

@property(readonly, nonatomic) _Bool isRepeatable;

@property(nonatomic) _Bool isRotated; // @synthesize isRotated=_isRotated;

- (void)load;

- (void)loadImageData;

- (void)loadImageDataFromCGImage:(struct CGImage *)arg1 pointsSize:(struct CGSize)arg2;

- (_Bool)loadImageDataFromPVRData:(id)arg1;

- (_Bool)loadImageDataFromPVRGZData:(id)arg1;

@property(copy, nonatomic) NSString *originalAtlasName; // @synthesize originalAtlasName=_originalAtlasName;

@property(readonly, nonatomic) struct CGSize pixelSize;

- (void)preload;

- (void)preloadWithCompletionHandler:(id)arg1;

@property(copy, nonatomic) NSString *subTextureName; // @synthesize subTextureName=_subTextureName;

- (void)setTextureDimension:(const struct CGSize *)arg1 withPixelSize:(const struct CGSize *)arg2;

@property(nonatomic) unsigned int textureTarget; // @synthesize textureTarget=_textureTarget;

@property(nonatomic) _Bool usesMipmaps;

@property(nonatomic) int wrapMode;

- (struct CGSize)size;

- (id)textureByApplyingCIFilter:(id)arg1;

- (struct CGRect)textureRect;

- (void)unload;

@property(readonly, nonatomic) _Bool useAlpha;



@end


